--- PROCESOS ALMACENADOS Version 1.0
--- TIENDA MILITAR HN


-- PROCEDIMIENTOS DE MODULO DE PERSONAS CHRISTIAN ALFREDO CASTRO LANZA ----

-- PROCEDIMIENTO PARA INSERTAR USUARIO--

DROP procedure IF EXISTS `INSERTAR_USUARIO`;

DELIMITER $$
USE `TIENDASM`$$
CREATE PROCEDURE `INSERTAR_USUARIO` 
(
in nom_p varchar(45),
in seg_nom varchar(45),
in pri_ape varchar(45), 
in segu_ape varchar(45),
in DNI varchar(50), 
in fec_n date, 
in est_c ENUM('S', 'C', 'V', 'U'), 
in sex ENUM('M', 'F'), 
In per varchar(50),
in tele int,
in tip_tele ENUM('F', 'C'),
in correo varchar(45)
)

BEGIN
START  TRANSACTION;

insert TBL_PERSONAS(PRIMER_NOMBRE,SEGUNDO_NOMBRE,PRIMER_APELLIDO,SEGUNDO_APELLIDO, DNI , FEC_NACIMIENTO, EST_CIVIL, SEXO ,PERFIL,FEC_REGISTRO,ULT_MODIFICACION)
value(nom_p,seg_nom,pri_ape,segu_ape, DNI, fec_n, est_c, sex, per,now(),now());


SELECT 
    @COD_PERSONA:=MAX(COD_PERSONA)
FROM
    TBL_PERSONAS;
 
 INSERT TBL_TELEFONOS(TELEFONO,TIPO_TELEFONO,FEC_REGISTRO, ULTIMA_MODIFICACION)
value(tele,tip_tele,now(),now());

SELECT 
    @COD_TELEFONO:=MAX(COD_TELEFONO)
FROM
    TBL_TELEFONOS;
 
 INSERT TBL_REL_PERTEL(COD_PERSONA, COD_TELEFONO,FEC_REGISTRO,ULT_MODIFICACION)
value(@COD_PERSONA,@COD_TELEFONO,now(),now());

insert TBL_CORREOS(CORREO, FEC_REGISTRO,ULT_MODIFICACION)
value(correo, now(),now());

SELECT 
    @COD_CORREO:=MAX(COD_CORREO)
FROM
    TBL_CORREOS;
 
 INSERT TBL_REL_CORREOS_PERSONAS(COD_CORREO,COD_PERSONA,FEC_REGISTRO,ULT_MODIFICACION)
value(@COD_CORREO,@COD_PERSONA,now(),now());


COMMIT;
END$$

--PROCEDIMIENTO PARA INSERTAR CLIENTES--

DROP procedure IF EXISTS `INSERTAR_CLIENTES`;

DELIMITER $$
USE `TIENDASM`$$
CREATE PROCEDURE `INSERTAR_CLIENTES` 
(
in nom_p varchar(45),
in seg_nom varchar(45),
in pri_ape varchar(45), 
in segu_ape varchar(45),
in DNI VARCHAR(100), 
in fec_n date, 
in est_c ENUM('S', 'C', 'V', 'U'), 
in sex ENUM('M', 'F'), 
In per varchar(45),
in lim_credito DECIMAL(10,0),
in tele int,
in tip_tele ENUM('F', 'C'),
in correo varchar(45),
in des_cuidades varchar(45),
in des_estado varchar(45),
in des_paises varchar(45),
in des_direcciones varchar(45)
)

BEGIN
START  TRANSACTION;
-- INSERTANDO EN PERSONAS -- 
insert TBL_PERSONAS(PRIMER_NOMBRE,SEGUNDO_NOMBRE,PRIMER_APELLIDO,SEGUNDO_APELLIDO, DNI , FEC_NACIMIENTO, EST_CIVIL, SEXO ,PERFIL,FEC_REGISTRO,ULT_MODIFICACION)
value(nom_p,seg_nom,pri_ape,segu_ape, DNI, fec_n, est_c, sex, per,now(),now());


SELECT 
    @COD_PERSONA:=MAX(COD_PERSONA)
FROM
    TBL_PERSONAS;
    
-- INSERTANDO EN CLIENTES -- 
     insert TBL_CLIENTES(COD_PERSONA,LIMI_CREDITO,FEC_REGISTRO,ULT_MODIFICACION)
value(@COD_PERSONA,lim_credito,now(),now());


SELECT 
    @COD_CLIENTE:=MAX(COD_CLIENTE)
FROM
    TBL_CLIENTES; 
   
    
 -- INSERTANDO EN TELEFONOS -- 
 INSERT TBL_TELEFONOS(TELEFONO,TIPO_TELEFONO,FEC_REGISTRO, ULTIMA_MODIFICACION)
value(tele,tip_tele,now(),now());

SELECT 
    @COD_TELEFONO:=MAX(COD_TELEFONO)
FROM
    TBL_TELEFONOS;

-- SELECCIONAR EL MAXIMO INSERTADO EN LA TABLA TELEFONOS
 INSERT TBL_REL_PERTEL(COD_PERSONA, COD_TELEFONO,FEC_REGISTRO,ULT_MODIFICACION)
value(@COD_PERSONA,@COD_TELEFONO,now(),now());

-- INSERTANDO EN CORREOS -- 
insert TBL_CORREOS(CORREO, FEC_REGISTRO,ULT_MODIFICACION)
value(correo, now(),now());

-- SELECCIONAR EL MAXIMO INSERTADO EN LA TABLA CORREO--
SELECT 
    @COD_CORREO:=MAX(COD_CORREO)
FROM
    TBL_CORREOS;
 
-- INSERTANDO EN LA TABLA RELACIONAL RELL_EMAIL_PERSONA--
 INSERT TBL_REL_CORREOS_PERSONAS(COD_CORREO,COD_PERSONA,FEC_REGISTRO,ULT_MODIFICACION)
value(@COD_CORREO,@COD_PERSONA,now(),now());

insert TBL_CIUDADES(DESCRIPCION, FEC_REGISTRO,ULT_MODIFICACION)
value(des_cuidades, now(),now());

SELECT 
    @COD_CIUDAD:=MAX(COD_CIUDAD)
FROM
    TBL_CIUDADES;

insert TBL_ESTADOS(COD_CIUDAD,DESCRIPCION, FEC_REGISTRO,ULT_MODIFICACION)
value(@COD_CIUDAD,des_estado, now(),now());

SELECT 
    @COD_ESTADOS:=MAX(COD_ESTADOS)
FROM
    TBL_ESTADOS;


insert TBL_PAISES(COD_ESTADOS,DESCRIPCION, FEC_REGISTRO,ULT_MODIFICACION)
value(@COD_ESTADOS,des_paises, now(),now());

SELECT 
    @COD_PAIS:=MAX(COD_PAIS)
FROM
    TBL_PAISES;

insert TBL_DIRECCIONES(COD_PAIS,DIRECCION, FEC_REGISTRO,ULT_MODIFICACION)
value(@COD_PAIS,des_direcciones, now(),now());

SELECT 
    @COD_DIRECCION:=MAX(COD_DIRECCION)
FROM
    TBL_DIRECCIONES;

 INSERT TBL_REL_DIRECCION_PERSONAS(COD_DIRECCION,COD_PERSONA,FEC_REGISTRO,ULT_MODIFICACION)
value(@COD_DIRECCION,@COD_PERSONA,now(),now());




COMMIT;
END$$

-- PROCEDIMIENTO PARA INSERTAR PROVEEDORES--

DROP procedure IF EXISTS `INSERTAR_PROVEEDORES`;

DELIMITER $$
USE `TIENDASM`$$
CREATE PROCEDURE `INSERTAR_PROVEEDORES` 
(
in nom_p varchar(45),
in seg_nom varchar(45),
in pri_ape varchar(45), 
in segu_ape varchar(45),
in DNI VARCHAR(50), 
in fec_n date, 
in est_c ENUM('S', 'C', 'V', 'D'), 
in sex ENUM('M', 'F'), 
In per varchar(50),
in nom_prov VARCHAR(45),
in nombre_cont VARCHAR(45),
in tele int,
in tip_tele ENUM('F', 'C'),
in correo varchar(45),
in des_cuidades varchar(45),
in des_estado varchar(45),
in des_paises varchar(45),
in des_direcciones varchar(45)


)

BEGIN
START  TRANSACTION;

-- INSERTAR DATOS EN LA TABLA PERSONAS--
insert TBL_PERSONAS(PRIMER_NOMBRE,SEGUNDO_NOMBRE,PRIMER_APELLIDO,SEGUNDO_APELLIDO, DNI , FEC_NACIMIENTO, EST_CIVIL, SEXO ,PERFIL,FEC_REGISTRO,ULT_MODIFICACION)
value(nom_p,seg_nom,pri_ape,segu_ape,DNI, fec_n, est_c, sex, per,now(),now());

 -- SELECCIONAR EL MAXIMO INSERTADO EN LA TABLA PERSONAS--
SELECT 
    @COD_PERSONA:=MAX(COD_PERSONA)
FROM
    TBL_PERSONAS;
    
 -- INSERTAR DATOS EN LA TABLA PROVEEDORES--   
insert TBL_PROVEEDORES(COD_PERSONA,NOMBRE_PROVEEDOR,NOMBRE_CONTACTO,FEC_REGISTRO,ULT_MODIFICACION)
value(@COD_PERSONA,nom_prov,nombre_cont,now(),now());

-- SELECCIONAR EL MAXIMO INSERTADO EN LA TABLA PROVEEDOR--
SELECT 
    @COD_PROVEEDOR:=MAX(COD_PROVEEDOR)
FROM
    TBL_PROVEEDORES; 
   
    
-- INSERTAR DATOS EN LA TABLA TELEFONOS-- 
 INSERT TBL_TELEFONOS(TELEFONO,TIPO_TELEFONO,FEC_REGISTRO, ULTIMA_MODIFICACION)
value(tele,tip_tele,now(),now());

-- SELECCIONAR EL MAXIMO INSERTADO EN LA TABLA TELEFONOS--
SELECT 
    @COD_TELEFONO:=MAX(COD_TELEFONO)
FROM
    TBL_TELEFONOS;
 
 INSERT TBL_REL_PERTEL(COD_PERSONA, COD_TELEFONO,FEC_REGISTRO,ULT_MODIFICACION)
value(@COD_PERSONA,@COD_TELEFONO,now(),now());

-- SELECCIONAR EL MAXIMO INSERTADO EN LA CORREO--
insert TBL_CORREOS(CORREO, FEC_REGISTRO,ULT_MODIFICACION)
value(correo, now(),now());

SELECT 
    @COD_CORREO:=MAX(COD_CORREO)
FROM
    TBL_CORREOS;
 
 -- INSERTANDO EN LA TABLA RELACIONAL CORREO PERSONAS
 INSERT TBL_REL_CORREOS_PERSONAS(COD_CORREO,COD_PERSONA,FEC_REGISTRO,ULT_MODIFICACION)
value(@COD_CORREO,@COD_PERSONA,now(),now());

insert TBL_CIUDADES(DESCRIPCION, FEC_REGISTRO,ULT_MODIFICACION)
value(des_cuidades, now(),now());

SELECT 
    @COD_CIUDAD:=MAX(COD_CIUDAD)
FROM
    TBL_CIUDADES;

insert TBL_ESTADOS(COD_CIUDAD,DESCRIPCION, FEC_REGISTRO,ULT_MODIFICACION)
value(@COD_CIUDAD,des_estado, now(),now());

SELECT 
    @COD_ESTADOS:=MAX(COD_ESTADOS)
FROM
    TBL_ESTADOS;


insert TBL_PAISES(COD_ESTADOS,DESCRIPCION, FEC_REGISTRO,ULT_MODIFICACION)
value(@COD_ESTADOS,des_paises, now(),now());

SELECT 
    @COD_PAIS:=MAX(COD_PAIS)
FROM
    TBL_PAISES;

insert TBL_DIRECCIONES(COD_PAIS,DIRECCION, FEC_REGISTRO,ULT_MODIFICACION)
value(@COD_PAIS,des_direcciones, now(),now());

SELECT 
    @COD_DIRECCION:=MAX(COD_DIRECCION)
FROM
    TBL_DIRECCIONES;

 INSERT TBL_REL_DIRECCION_PERSONAS(COD_DIRECCION,COD_PERSONA,FEC_REGISTRO,ULT_MODIFICACION)
value(@COD_DIRECCION,@COD_PERSONA,now(),now());




COMMIT;
END$$

-- PROCEDIMIENTO PARA INSERTAR PREGUNTAS--

DROP procedure IF EXISTS `INSERTAR_PREGUNTA`;

DELIMITER $$
USE `TIENDASM`$$
CREATE PROCEDURE `INSERTAR_PREGUNTA` 
(
in nom_p varchar(45),
in seg_nom varchar(45),
in pri_ape varchar(45), 
in segu_ape varchar(45),
in DNI VARCHAR(50), 
in fec_n date, 
in est_c ENUM('S', 'C', 'V', 'D'), 
in sex ENUM('M', 'F'), 
In per varchar(50),
IN usu VARCHAR(20), 
IN email VARCHAR(50),
IN contra VARCHAR(50),
IN Pregun VARCHAR(100),
IN Crea_p VARCHAR(45),
IN modi_p VARCHAR(45),
IN answer VARCHAR(250)
)

BEGIN
START  TRANSACTION;

insert TBL_PERSONAS(PRIMER_NOMBRE,SEGUNDO_NOMBRE,PRIMER_APELLIDO,SEGUNDO_APELLIDO, DNI,FEC_NACIMIENTO,EST_CIVIL,SEXO,PERFIL,FEC_REGISTRO,ULT_MODIFICACION)
value(nom_p,seg_nom,pri_ape,segu_ape, DNI, fec_n, est_c, sex, per,now(),now());


SELECT 
    @COD_PERSONA:=MAX(COD_PERSONA)
FROM
    TBL_PERSONAS;
 

insert TBL_USUARIOS(COD_PERSONA,USUARIO, EMAIL ,CONTRASEÑA,FEC_REGISTRO,ULT_MODIFICACION)
value(@COD_PERSONA,usu, email,contra,now(),now());

SELECT 
    @COD_USUARIO:=MAX(COD_USUARIO)
FROM
    TBL_USUARIOS;
 
 INSERT TBL_PREGUNTAS(PREGUNTA,CREADO_POR,MODIFICADO_POR,FEC_REGISTRO,ULT_MODIFICACION)
value(Pregun,Crea_p,modi_p,now(),now());

SELECT 
    @COD_PREGUNTA:=MAX(COD_PREGUNTA)
FROM
   TBL_PREGUNTAS;
 
 INSERT TBL_PREGUNTA_USUARIO(COD_PREGUNTA,COD_USUARIO,RESPUESTA,FEC_REGISTRO,ULT_MODIFICACION)
value(@COD_PREGUNTA,@COD_USUARIO,answer,now(),now());


COMMIT;
END$$

-- PROCEDIMIENTO PARA INSERTAR ROLES--

DROP procedure IF EXISTS `INSERTAR_ROLES`;

DELIMITER $$
USE `TIENDASM`$$
CREATE PROCEDURE `INSERTAR_ROLES` 
(
in nom_p varchar(45),
in seg_nom varchar(45),
in pri_ape varchar(45), 
in segu_ape varchar(45),
in DNI VARCHAR(50), 
in fec_n date, 
in est_c ENUM('S', 'C', 'V', 'D'), 
in sex ENUM('M', 'F'), 
In per varchar(50),
IN usu VARCHAR(20), 
IN email VARCHAR(50),
IN contra VARCHAR(50),
in nombre_r varchar(50)
)

BEGIN
START  TRANSACTION;

insert TBL_PERSONAS(PRIMER_NOMBRE,SEGUNDO_NOMBRE,PRIMER_APELLIDO,SEGUNDO_APELLIDO, DNI,FEC_NACIMIENTO,EST_CIVIL,SEXO,PERFIL,FEC_REGISTRO,ULT_MODIFICACION)
value(nom_p,seg_nom,pri_ape,segu_ape, DNI, fec_n, est_c, sex, per,now(),now());


SELECT 
    @COD_PERSONA:=MAX(COD_PERSONA)
FROM
    TBL_PERSONAS;
 

insert TBL_USUARIOS(COD_PERSONA,USUARIO, EMAIL ,CONTRASEÑA,FEC_REGISTRO,ULT_MODIFICACION)
value(@COD_PERSONA,usu, email,contra,now(),now());

SELECT 
    @COD_USUARIO:=MAX(COD_USUARIO)
FROM
    TBL_USUARIOS;
 
insert TBL_ROLES(NOMBRE_ROL,FEC_REGISTRO,ULT_MODIFICACION)
value(nombre_r,now(),now());
SELECT 
    @COD_ROL:=MAX(COD_ROL)
FROM
    TBL_ROLES;
  
  insert TBL_RELROL_USUARIO(COD_ROL,COD_USUARIO)
value(@COD_ROL,@COD_USUARIO);

COMMIT;
END$$

--- PROCEDIMIENTO PARA ACTUALIZAR USUARIOS--

ROP procedure IF EXISTS `UPDATE_USUARIOS`;

DELIMITER $$
USE `TIENDASM`$$
CREATE PROCEDURE `UPDATE_USUARIOS` 
(
IN COD_PER INT,
in nom_p varchar(45),
in seg_nom varchar(45),
in pri_ape varchar(45), 
in segu_ape varchar(45),
IN DNI VARCHAR(50), 
IN fec_n date, 
IN est_c ENUM('S', 'C', 'V', 'D'), 
IN sex ENUM('M', 'F'), 
IN per varchar(50),
IN COD_TEL INT,
IN tele int,
IN tip_tele ENUM('F', 'C'),
IN COD_E INT,
IN correo varchar(45)
)

BEGIN
START  TRANSACTION;

UPDATE TBL_PERSONAS
SET
PRIMER_NOMBRE = nom_p, 
SEGUNDO_NOMBRE= seg_nom,
PRIMER_APELLIDO = pri_ape, 
SEGUNDO_APELLIDO = segu_ape,
DNI = DNI, 
FEC_NACIMIENTO = fec_n, 
EST_CIVIL = est_c, 
SEXO = sex,
PERFIL =per

WHERE COD_PERSONA = COD_PER;

SELECT 
    @COD_PERSONA:=MAX(COD_PERSONA)
FROM
    TBL_PERSONAS;
        
 
UPDATE TBL_TELEFONOS
SET
TELEFONO = tele,
TIPO_TELEFONO= tip_tele

WHERE COD_TELEFONO = COD_TEL;

SELECT 
    @COD_TELEFONO:=MAX(COD_TELEFONO)
FROM
    TBL_TELEFONOS;
 
UPDATE TBL_REL_PERTEL
SET
COD_PERSONA= @COD_PERSONA ,
COD_TELEFONO=@COD_TELEFONO

WHERE COD_PERSONA = @COD_PERSONA;

UPDATE  TBL_CORREOS
SET
CORREO = correo

WHERE COD_CORREO =COD_E;

SELECT 
    @COD_CORREO:=MAX(COD_CORREO)
FROM
    TBL_CORREOS;
 
 UPDATE TBL_REL_CORREOS_PERSONAS
SET 
 COD_CORREO = @COD_CORREO,
 COD_PERSONA = @COD_PERSONA
 
 WHERE COD_PERSONA = @COD_PERSONA;


COMMIT;

----- ACTUALIZAR CLIENTES---

DROP procedure IF EXISTS `UPDATE_CLIENTES`;

DELIMITER $$
USE `TIENDASM`$$
CREATE PROCEDURE `UPDATE_CLIENTES` 
(
IN COD_PER INT,
in nom_p varchar(45),
in seg_nom varchar(45),
in pri_ape varchar(45), 
in segu_ape varchar(45),
IN DNI VARCHAR(45), 
IN fec_n date, 
IN est_c ENUM('S', 'C', 'V', 'D'), 
IN sex ENUM('M', 'F'), 
IN per varchar(50),
IN COD_CLIENT INT,
IN lim_credit DECIMAL(10,0),
IN COD_TEL INT,
IN tele int,
IN tip_tele ENUM('F', 'C'),
IN COD_E INT,
IN correo varchar(45),
IN cod_city INT,
in des_cuidades varchar(45),
IN cod_est INT,
in des_estado varchar(45),
IN cod_pais INT,
in des_paises varchar(45),
IN cod_dir INT,
in des_direcciones varchar(45),
IN cod_dp INT
)

BEGIN
START  TRANSACTION;
-- ACTUALIZANDO DATOS DE CLIENTES EN LA TABLA PERSONAS --
UPDATE TBL_PERSONAS
SET
PRIMER_NOMBRE = nom_p, 
SEGUNDO_NOMBRE= seg_nom,
PRIMER_APELLIDO = pri_ape, 
SEGUNDO_APELLIDO = segu_ape,
DNI = DNI, 
FEC_NACIMIENTO = fec_n, 
EST_CIVIL = est_c, 
SEXO = sex,
PERFIL =per

WHERE COD_PERSONA = COD_PER;

SELECT 
    @COD_PERSONA:=MAX(COD_PERSONA)
FROM
    TBL_PERSONAS;

-- ACTUALIZANDO DATOS DE CLIENTES--
    UPDATE TBL_CLIENTES
    SET 
    COD_PERSONA = @COD_PERSONA,
    LIMI_CREDITO = lim_credit
    
    WHERE COD_CLIENTE = COD_CLIENT;


SELECT 
    @COD_CLIENTE:=MAX(COD_CLIENTE)
FROM
    TBL_CLIENTES; 

-- ACTUALIZANDO DATOS DE TELEFONOS-- 
UPDATE TBL_TELEFONOS
SET
TELEFONO = tele,
TIPO_TELEFONO= tip_tele

WHERE COD_TELEFONO = COD_TEL;

SELECT 
    @COD_TELEFONO:=MAX(COD_TELEFONO)
FROM
    TBL_TELEFONOS;
 
UPDATE TBL_REL_PERTEL
SET
COD_PERSONA= @COD_PERSONA ,
COD_TELEFONO=@COD_TELEFONO

WHERE COD_PERSONA = @COD_PERSONA;

-- ACTUALIZANDO DATOS DE CORREOS--
UPDATE  TBL_CORREOS
SET
CORREO = correo

WHERE COD_CORREO =COD_E;

SELECT 
    @COD_CORREO:=MAX(COD_CORREO)
FROM
    TBL_CORREOS;
 
 UPDATE TBL_REL_CORREOS_PERSONAS
SET 
 COD_CORREO = @COD_CORREO,
 COD_PERSONA = @COD_PERSONA
 
 WHERE COD_PERSONA = @COD_PERSONA;
 
UPDATE TBL_CIUDADES 
SET 
    DESCRIPCION = des_cuidades
WHERE
    COD_CIUDAD = cod_city;

SELECT 
    @COD_CIUDAD:=MAX(COD_CIUDAD)
FROM
    TBL_CIUDADES;

UPDATE TBL_ESTADOS 
SET 
    COD_CIUDAD = @COD_CIUDAD,
    DESCRIPCION = des_estado
WHERE
    COD_ESTADOS = cod_est;

SELECT 
    @COD_ESTADOS:=MAX(COD_ESTADOS)
FROM
    TBL_ESTADOS;


UPDATE TBL_PAISES 
SET 
    COD_ESTADOS = COD_ESTADOS,
    DESCRIPCION = des_paises
WHERE
    COD_PAIS = cod_pais;

SELECT 
    @COD_PAIS:=MAX(COD_PAIS)
FROM
    TBL_PAISES;

UPDATE TBL_DIRECCIONES
SET
COD_PAIS = @COD_PAIS,
DIRECCION = des_direcciones 

WHERE COD_DIRECCION = cod_dir;

SELECT 
    @COD_DIRECCION:=MAX(COD_DIRECCION)
FROM
    TBL_DIRECCIONES;

UPDATE TBL_REL_DIRECCION_PERSONAS 
SET 
COD_DIRECCION = @COD_DIRECCION,
COD_PERSONA = @COD_PERSONA

WHERE COD_DIRECCION_PERSONA = cod_dp;



COMMIT;
END$$

-- PROCEDIMIENTO PARA ACTUALIZAR PROVEEDORES--

DROP procedure IF EXISTS `UPDATE_PROVEEDORES`;

DELIMITER $$
USE `TIENDASM`$$
CREATE PROCEDURE `UPDATE_PROVEEDORES` 
(
IN COD_PER INT,
in nom_p varchar(45),
in seg_nom varchar(45),
in pri_ape varchar(45), 
in segu_ape varchar(45),
IN DNI VARCHAR(50), 
IN fec_n date, 
IN est_c ENUM('S', 'C', 'V', 'D'), 
IN sex ENUM('M', 'F'), 
IN per varchar(50),
IN COD_PROV INT,
IN nom_prov VARCHAR(45),
IN nombre_cont VARCHAR(45),
IN COD_TEL INT,
IN tele int,
IN tip_tele ENUM('F', 'C'),
IN COD_E INT,
IN correo varchar(45),
IN cod_city INT,
in des_cuidades varchar(45),
IN cod_est INT,
in des_estado varchar(45),
IN cod_pais INT,
in des_paises varchar(45),
IN cod_dir INT,
in des_direcciones varchar(45),
IN cod_dp INT

)

BEGIN
START  TRANSACTION;

UPDATE TBL_PERSONAS
SET
PRIMER_NOMBRE = nom_p, 
SEGUNDO_NOMBRE= seg_nom,
PRIMER_APELLIDO = pri_ape, 
SEGUNDO_APELLIDO = segu_ape,
DNI = DNI, 
FEC_NACIMIENTO = fec_n, 
EST_CIVIL = est_c, 
SEXO = sex,
PERFIL =per

WHERE COD_PERSONA = COD_PER;

SELECT 
    @COD_PERSONA:=MAX(COD_PERSONA)
FROM
    TBL_PERSONAS;
    
    UPDATE TBL_PROVEEDORES
    SET 
    COD_PERSONA = @COD_PERSONA,
    NOMBRE_PROVEEDOR = nom_prov,
    NOMBRE_CONTACTO = nombre_cont
    
    WHERE COD_PROVEEDOR = COD_PROV;


SELECT 
    @COD_PROVEEDOR:=MAX(COD_PROVEEDOR)
FROM
    TBL_PROVEEDORES; 
    
    
 
UPDATE TBL_TELEFONOS
SET
TELEFONO = tele,
TIPO_TELEFONO= tip_tele

WHERE COD_TELEFONO = COD_TEL;

SELECT 
    @COD_TELEFONO:=MAX(COD_TELEFONO)
FROM
    TBL_TELEFONOS;
 
UPDATE TBL_REL_PERTEL
SET
COD_PERSONA= @COD_PERSONA ,
COD_TELEFONO=@COD_TELEFONO

WHERE COD_PERSONA = @COD_PERSONA;

UPDATE  TBL_CORREOS
SET
CORREO = correo

WHERE COD_CORREO =COD_E;

SELECT 
    @COD_CORREO:=MAX(COD_CORREO)
FROM
    TBL_CORREOS;
 
 UPDATE TBL_REL_CORREOS_PERSONAS
SET 
 COD_CORREO = @COD_CORREO,
 COD_PERSONA = @COD_PERSONA
 
 WHERE COD_PERSONA = @COD_PERSONA;
 
 UPDATE TBL_CIUDADES 
SET 
    DESCRIPCION = des_cuidades
WHERE
    COD_CIUDAD = cod_city;

SELECT 
    @COD_CIUDAD:=MAX(COD_CIUDAD)
FROM
    TBL_CIUDADES;

UPDATE TBL_ESTADOS 
SET 
    COD_CIUDAD = @COD_CIUDAD,
    DESCRIPCION = des_estado
WHERE
    COD_ESTADOS = cod_est;

SELECT 
    @COD_ESTADOS:=MAX(COD_ESTADOS)
FROM
    TBL_ESTADOS;


UPDATE TBL_PAISES 
SET 
    COD_ESTADOS = COD_ESTADOS,
    DESCRIPCION = des_paises
WHERE
    COD_PAIS = cod_pais;

SELECT 
    @COD_PAIS:=MAX(COD_PAIS)
FROM
    TBL_PAISES;

UPDATE TBL_DIRECCIONES
SET
COD_PAIS = @COD_PAIS,
DIRECCION = des_direcciones 

WHERE COD_DIRECCION = cod_dir;

SELECT 
    @COD_DIRECCION:=MAX(COD_DIRECCION)
FROM
    TBL_DIRECCIONES;

UPDATE TBL_REL_DIRECCION_PERSONAS 
SET 
COD_DIRECCION = @COD_DIRECCION,
COD_PERSONA = @COD_PERSONA

WHERE COD_DIRECCION_PERSONA = cod_dp;



COMMIT;
END$$

----- PROCEDIMIENTO PARA ACTUALIZAR  PREGUNTAS----

DROP procedure IF EXISTS `UPDATE_PREGUNTAS`;

DELIMITER $$
USE `TIENDASM`$$
CREATE PROCEDURE `UPDATE_PREGUNTAS` 
(
IN COD_PER INT,
in nom_p varchar(45),
in seg_nom varchar(45),
in pri_ape varchar(45), 
in segu_ape varchar(45),
in DNI VARCHAR(50), 
in fec_n date, 
in est_c ENUM('S', 'C', 'V', 'D'), 
in sex ENUM('M', 'F'), 
In per varchar(50),
IN COD_USER INT,
IN usu VARCHAR(20), 
IN email VARCHAR(50),
IN contra VARCHAR(50),
IN COD_PREG INT,
IN Pregun VARCHAR(100),
IN Crea_p VARCHAR(45),
IN modi_p VARCHAR(45),
IN answer VARCHAR(250)
)

BEGIN
START  TRANSACTION;

UPDATE TBL_PERSONAS
SET
PRIMER_NOMBRE = nom_p, 
SEGUNDO_NOMBRE= seg_nom,
PRIMER_APELLIDO = pri_ape, 
SEGUNDO_APELLIDO = segu_ape,
DNI = DNI, 
FEC_NACIMIENTO = fec_n, 
EST_CIVIL = est_c, 
SEXO = sex,
PERFIL =per

WHERE COD_PERSONA = COD_PER;

SELECT 
    @COD_PERSONA:=MAX(COD_PERSONA)
FROM
    TBL_PERSONAS;
    
  UPDATE TBL_USUARIOS
SET
COD_PERSONA = nom_p,
USUARIO= usu,
EMAIL = email, 
CONTRASEÑA = contra

WHERE COD_USUARIO = COD_USER;

SELECT 
    @COD_USUARIO:=MAX(COD_USUARIO)
FROM
    TBL_USUARIOS;  
        
 
UPDATE TBL_PREGUNTAS
SET
PREGUNTA = Pregun,
CREADO_POR= Crea_p,
MODIFICADO_POR=modi_p 

WHERE COD_PREGUNTA = COD_PREG;

SELECT 
    @COD_PREGUNTA:=MAX(COD_PREGUNTA)
FROM
   TBL_PREGUNTAS;
 
UPDATE TBL_PREGUNTA_USUARIO
SET
COD_PREGUNTA= @COD_PREGUNTA ,
COD_USUARIO=@COD_USUARIO,
RESPUESTA = answer

WHERE COD_USUARIO = @COD_USUARIO;


COMMIT;
END$$

--- PROCEDIMIENTOS PARA ACTUALIZAR ROLES----

DROP procedure IF EXISTS `UPDATE_ROLES`;

DELIMITER $$
USE `TIENDASM`$$
CREATE PROCEDURE `UPDATE_ROLES` 
(
IN cod_per INT,
in nom_p varchar(45),
in seg_nom varchar(45),
in pri_ape varchar(45), 
in segu_ape varchar(45),
in DNI VARCHAR(50), 
in fec_n date, 
in est_c ENUM('S', 'C', 'V', 'D'), 
in sex ENUM('M', 'F'), 
In per varchar(50),
IN cod_usu INT,
IN usu VARCHAR(20), 
IN email VARCHAR(50),
IN contra VARCHAR(50),
in nombre_r varchar(50),
IN cod_rol INT


)

BEGIN
START  TRANSACTION;

UPDATE TBL_PERSONAS
SET 
PRIMER_NOMBRE = nom_p,
SEGUNDO_NOMBRE =seg_nom,
PRIMER_APELLIDO =pri_ape,
SEGUNDO_APELLIDO = segu_ape, 
DNI = DNI,
FEC_NACIMIENTO = fec_n,
EST_CIVIL=est_c,
SEXO =sex,
PERFIL =per
 
WHERE COD_PERSONA= cod_per; 

SELECT 
    @COD_PERSONA:=MAX(COD_PERSONA)
FROM
    TBL_PERSONAS;
 

UPDATE TBL_USUARIOS
SET 
COD_PERSONA= @COD_PERSONA,
USUARIO = usu, 
EMAIL = email,
CONTRASEÑA =contra

WHERE COD_USUARIO= cod_usu;

SELECT 
    @COD_USUARIO:=MAX(COD_USUARIO)
FROM
    TBL_USUARIOS;
 
UPDATE TBL_ROLES 
SET
NOMBRE_ROL = nombre_r

WHERE COD_ROL = cod_rol;

SELECT
    @COD_ROL:=MAX(COD_ROL)
FROM
    TBL_ROLES;
  
UPDATE TBL_RELROL_USUARIO
SET 
COD_ROL = @COD_ROL,
COD_USUARIO = @COD_USUARIO

WHERE COD_USUARIO = @COD_USUARIO;

COMMIT;
END$$

CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `SELECT_PERSONAS`()
BEGIN
SELECT `TBL_PERSONAS`.`COD_PERSONA` AS `CODIGO`, `TBL_PERSONAS`.`PRIMER_NOMBRE`, `TBL_PERSONAS`.`SEGUNDO_NOMBRE`,`TBL_PERSONAS`.`PRIMER_APELLIDO`, `TBL_PERSONAS`.`SEGUNDO_APELLIDO`, `TBL_PERSONAS`.`DNI`, `TBL_PERSONAS`.`FEC_NACIMIENTO`,`TBL_PERSONAS`.`EST_CIVIL`,`TBL_PERSONAS`.`SEXO`, `TBL_PERSONAS`.`PERFIL`, `TBL_REL_PERTEL`.`COD_PER_TEL` AS `CODIGO REGISTRO TELEFONO`, `TBL_TELEFONOS`.`TELEFONO` AS `NUM_TELEFONO`, `TBL_REL_CORREOS_PERSONAS`.`COD_CORREO_PERSONA` AS `CODIGO REGISTRO CORREO`, `TBL_CORREOS`.`CORREO`,`TBL_PERSONAS`.`FEC_REGISTRO`AS`FECHA DE REGISTRO`
FROM `TBL_PERSONAS` 
	INNER JOIN `TBL_REL_PERTEL` ON `TBL_REL_PERTEL`.`COD_PERSONA` = `TBL_PERSONAS`.`COD_PERSONA` 
	INNER JOIN `TBL_TELEFONOS` ON `TBL_REL_PERTEL`.`COD_TELEFONO` = `TBL_TELEFONOS`.`COD_TELEFONO` 
	INNER JOIN `TBL_REL_CORREOS_PERSONAS` ON `TBL_REL_CORREOS_PERSONAS`.`COD_PERSONA` = `TBL_PERSONAS`.`COD_PERSONA` 
	INNER JOIN `TBL_CORREOS` ON `TBL_REL_CORREOS_PERSONAS`.`COD_CORREO` = `TBL_CORREOS`.`COD_CORREO`;

END

CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `SELECT_CLIENTES`()
BEGIN
SELECT `TBL_CLIENTES`.`COD_CLIENTE` AS `CODIGO DE CLIENTE`, `TBL_CLIENTES`.`COD_PERSONA` AS `CODIDO DE PERSONA`, `TBL_PERSONAS`.`PRIMER_NOMBRE`, `TBL_PERSONAS`.`SEGUNDO_NOMBRE`,`TBL_PERSONAS`.`PRIMER_APELLIDO`, `TBL_PERSONAS`.`SEGUNDO_APELLIDO`, `TBL_PERSONAS`.`DNI`, `TBL_PERSONAS`.`FEC_NACIMIENTO`,`TBL_PERSONAS`.`EST_CIVIL`,`TBL_PERSONAS`.`SEXO`, `TBL_CLIENTES`.`LIMI_CREDITO` AS `LIMITE DE CREDITO` , `TBL_REL_PERTEL`.`COD_PER_TEL` AS `CODIGO REGISTRO TELEFONO`, `TBL_TELEFONOS`.`TELEFONO` AS `NUM_TELEFONO`, `TBL_REL_CORREOS_PERSONAS`.`COD_CORREO_PERSONA` AS `CODIGO REGISTRO CORREO`, `TBL_CORREOS`.`CORREO`, `TBL_REL_DIRECCION_PERSONAS`.`COD_DIRECCION_PERSONA` AS `CODIGO DIRECCION PERSONA`,  `TBL_DIRECCIONES`.`DIRECCION`

FROM `TBL_CLIENTES` 
	INNER JOIN `TBL_PERSONAS` ON `TBL_CLIENTES`.`COD_PERSONA` = `TBL_PERSONAS`.`COD_PERSONA` 
	INNER JOIN `TBL_REL_PERTEL` ON `TBL_REL_PERTEL`.`COD_PERSONA` = `TBL_CLIENTES`.`COD_PERSONA` 
	INNER JOIN `TBL_TELEFONOS` ON `TBL_REL_PERTEL`.`COD_TELEFONO` = `TBL_TELEFONOS`.`COD_TELEFONO` 
	INNER JOIN `TBL_REL_CORREOS_PERSONAS` ON `TBL_REL_CORREOS_PERSONAS`.`COD_PERSONA` = `TBL_CLIENTES`.`COD_PERSONA` 
	INNER JOIN `TBL_CORREOS` ON `TBL_REL_CORREOS_PERSONAS`.`COD_CORREO` = `TBL_CORREOS`.`COD_CORREO` 
    INNER JOIN `TBL_REL_DIRECCION_PERSONAS` ON `TBL_REL_DIRECCION_PERSONAS`.`COD_PERSONA` = `TBL_CLIENTES`.`COD_PERSONA` 
	INNER JOIN `TBL_DIRECCIONES` ON `TBL_REL_DIRECCION_PERSONAS`.`COD_PERSONA` = `TBL_CLIENTES`.`COD_PERSONA`;

END

CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `SELECT_PROVEEDORES`()
BEGIN
SELECT `TBL_PROVEEDORES`.`COD_PROVEEDOR` AS `CODIGO DEL PROVEEDOR`, `TBL_PROVEEDORES`.`COD_PERSONA` AS `CODIDO DE PERSONA`, `TBL_PERSONAS`.`PRIMER_NOMBRE`, `TBL_PERSONAS`.`SEGUNDO_NOMBRE`,`TBL_PERSONAS`.`PRIMER_APELLIDO`, `TBL_PERSONAS`.`SEGUNDO_APELLIDO`, `TBL_PERSONAS`.`DNI`, `TBL_PERSONAS`.`FEC_NACIMIENTO`,`TBL_PERSONAS`.`EST_CIVIL`,`TBL_PERSONAS`.`SEXO`, `TBL_PROVEEDORES`.`NOMBRE_PROVEEDOR` AS `NOMBRE DEL PROVEEDOR` ,`TBL_PROVEEDORES`.`NOMBRE_CONTACTO` AS `NOMBRE DEL CONTACTO`, `TBL_REL_PERTEL`.`COD_PER_TEL` AS `CODIGO REGISTRO TELEFONO`, `TBL_TELEFONOS`.`TELEFONO` AS `NUM_TELEFONO`, `TBL_REL_CORREOS_PERSONAS`.`COD_CORREO_PERSONA` AS `CODIGO REGISTRO CORREO`, `TBL_CORREOS`.`CORREO`, `TBL_REL_DIRECCION_PERSONAS`.`COD_DIRECCION_PERSONA` AS `CODIGO DIRECCION PERSONA`,  `TBL_DIRECCIONES`.`DIRECCION`

FROM `TBL_PROVEEDORES` 
	INNER JOIN `TBL_PERSONAS` ON `TBL_PROVEEDORES`.`COD_PERSONA` = `TBL_PERSONAS`.`COD_PERSONA` 
	INNER JOIN `TBL_REL_PERTEL` ON `TBL_REL_PERTEL`.`COD_PERSONA` = `TBL_PROVEEDORES`.`COD_PERSONA` 
	INNER JOIN `TBL_TELEFONOS` ON `TBL_REL_PERTEL`.`COD_TELEFONO` = `TBL_TELEFONOS`.`COD_TELEFONO` 
	INNER JOIN `TBL_REL_CORREOS_PERSONAS` ON `TBL_REL_CORREOS_PERSONAS`.`COD_PERSONA` = `TBL_PROVEEDORES`.`COD_PERSONA` 
	INNER JOIN `TBL_CORREOS` ON `TBL_REL_CORREOS_PERSONAS`.`COD_CORREO` = `TBL_CORREOS`.`COD_CORREO` 
    INNER JOIN `TBL_REL_DIRECCION_PERSONAS` ON `TBL_REL_DIRECCION_PERSONAS`.`COD_PERSONA` = `TBL_PROVEEDORES`.`COD_PERSONA` 
	INNER JOIN `TBL_DIRECCIONES` ON `TBL_REL_DIRECCION_PERSONAS`.`COD_PERSONA` = `TBL_PROVEEDORES`.`COD_PERSONA`;

END

CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `SELECT_PREGUNTAS`()
BEGIN
SELECT `TBL_PREGUNTAS`.`COD_PREGUNTA` AS `CODIGO PREGUNTA`, `TBL_PREGUNTAS`.`PREGUNTA`,`TBL_PREGUNTAS`.`CREADO_POR`, `TBL_PREGUNTAS`.`MODIFICADO_POR`,`TBL_PREGUNTA_USUARIO`.`RESPUESTA`,`TBL_PREGUNTA_USUARIO`.`COD_USUARIO`

FROM `TBL_PREGUNTAS` 
	INNER JOIN `TBL_PREGUNTA_USUARIO` ON `TBL_PREGUNTA_USUARIO`.`COD_PREGUNTA` = `TBL_PREGUNTAS`.`COD_PREGUNTA`

    ;
END

CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `SELECT_ROLES`()
    SQL SECURITY INVOKER
BEGIN 
SELECT * FROM TBL_ROLES
COMMIT;
END

CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `DELETE_PERSONAS`(IN PI_COD_PERSONAS INT)
BEGIN
DELETE FROM
    TBL_PERSONAS
WHERE
    COD_PERSONAS = cod_personas;
    END

CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `DELETE_CLIENTES`(IN PI_COD_CLIENTES INT)
BEGIN
DELETE FROM
    TBL_CLIENTES
WHERE
    COD_CLIENTES = cod_clientes;
    END

CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `DELETE_PROVEEDORES`(IN PI_COD_PROVEEDORES INT)
BEGIN
DELETE FROM
    TBL_PROVEEDORES
WHERE
    COD_PROVEEDORES = cod_proveedores;
    END

CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `DELETE_PREGUNTAS`(IN PI_COD_PREGUNTAS INT)
BEGIN
DELETE FROM
    TBL_PREGUNTAS
WHERE
    COD_PREGUNTAS = cod_preguntas;
    END

CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `DELETE_ROLES`(IN PI_COD_ROLES INT)
BEGIN
DELETE FROM
    TBL_ROLES
WHERE
    COD_ROLES = cod_roles;
    END



-- INSERTAR ARTICULO ELABORADO POR: JONATHAN CARRASCO 

CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `INSERTAR_ARTICULO`(IN `COD_CATEGORIA` INT, 
IN `NOM_ART` VARCHAR(45),
IN `PREC_COMPRA` DECIMAL, 
IN `PREC_VENTA` DECIMAL,
IN `DESCRIPCION` VARCHAR(200), 
IN `EXISTENCIAS` INT, 
IN `ESTADO` BINARY, 
IN `FEC_MODIFICACION` DATE)

    SQL SECURITY INVOKER
BEGIN
START TRANSACTION;
-- Insertando en la tabla ARTICULO

INSERT INTO TBL_ARTICULOS(
   COD_CATEGORIA
  ,NOM_ART
  ,PREC_COMPRA
  ,PREC_VENTA
  ,DESCRIPCION
  ,EXISTENCIAS
  ,ESTADO
  ,FEC_MODIFICACION
  ,ULT_MODIFICACION
) 
VALUES (
   COD_CATEGORIA
  ,NOM_ART
  ,PREC_COMPRA
  ,PREC_VENTA
  ,DESCRIPCION
  ,EXISTENCIAS
  ,ESTADO
  ,now() 
  ,now()  /* FECHA ACTUAL */
);   

/*
SELECT @COD_ARTICULO:= MAX(COD_ARTICULOS) FROM TBL_ARTICULO;

INSERT INTO TBL_CAT_ARTICULO (
-- COD_CATEGORIA INT --- ESTE DEBE SER AUTOMATICO 
	NOM_CATEGORIA,
    DESCRIPCION,
    FECH_REGISTRO,
    ULT_REGISTRO)
    VALUES (
    PV_NOM_CATEGORIA,
    PV_DESCRIPCION,
    PF_FECH_REGISTRO,
    NOW()    );
     */
COMMIT;
END

-- INSERTAR CATEGORIA ARTICULO

CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `INSERTAR_CAT_ARTICULO`(IN `NOM_CATEGORIA` VARCHAR(45), 
IN `DESCRIPCION` VARCHAR(200), 
IN `FEC_REGISTRO` DATE)
    SQL SECURITY INVOKER

BEGIN
START TRANSACTION;
-- Insertando en la tabla ARTICULO CATEGORIA

INSERT INTO TBL_CAT_ARTICULOS(
   NOM_CATEGORIA
  ,DESCRIPCION
  ,FEC_REGISTRO
  ,ULT_REGISTRO
) 
VALUES (
   NOM_CATEGORIA
  ,DESCRIPCION
  ,NOW()
  ,now()  /* FECHA ACTUAL */
);  

COMMIT;
END



-- UPDATE ARTICULO 

CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `UPDATE_ARTICULOS`(IN `PI_COD_CATEGORIA` INT,
IN `PV_NOM_ART` VARCHAR(45),
IN `PF_PREC_COMPRA` DECIMAL, 
IN `PF_PREC_VENTA` DECIMAL, 
IN `PV_DESCRIPCION` VARCHAR(200), 
IN `PI_EXISTENCIAS` INT, 
IN `PB_ESTADO` BINARY, 
IN `PF_FECH_MOD` DATE, 
IN `PI_COD_ARTICULO` INT)

    SQL SECURITY INVOKER
BEGIN
--  START TRANSACTION; 

UPDATE TBL_ARTICULOS
SET 
   -- COD_ARTICUL0 = PI_COD_ARTICULO  
   COD_CATEGORIA = PI_COD_CATEGORIA 
  , NOM_ART = PV_NOM_ART 
  , PREC_COMPRA = PF_PREC_COMPRA 
  , PREC_VENTA = PF_PREC_VENTA 
  , DESCRIPCION = PV_DESCRIPCION 
  , EXISTENCIAS = PI_EXISTENCIAS 
  , ESTADO = PB_ESTADO 
  , FEC_MODIFICACION = PF_FECH_MOD 
  , ULT_MODIFICACION = NOW()
  
WHERE COD_ARTICULO = PI_COD_ARTICULO;
 COMMIT;
 END



-- UPDATE CATEGORIA ARTICULOS
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `UPDATE_CAT_ARTICULO`(IN `PV_NOM_CAT` VARCHAR(45), 
IN `PV_DESCRIPCION` VARCHAR(200),
IN `PF_FEC_REGISTRO` DATE,
IN `PI_COD_CATEGORIA` INT)

BEGIN

-- START TRANSACTION; 

UPDATE TBL_CAT_ARTICULOS
SET 
    NOM_CATEGORIA = PV_NOM_CAT
  , DESCRIPCION = PV_DESCRIPCION 
  , FEC_REGISTRO = PF_FEC_REGISTRO 
  , ULT_REGISTRO = NOW()
  
  WHERE COD_CATEGORIA = PI_COD_CATEGORIA;
 COMMIT;
 END


-- SELECT ARTICULOS EN GENERAL

CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `SELECT_ARTICULOS`()
    SQL SECURITY INVOKER
BEGIN 

SELECT TBL_ARTICULOS.COD_ARTICULO, TBL_ARTICULOS.NOM_ART, TBL_ARTICULOS.COD_CATEGORIA , TBL_CAT_ARTICULOS.NOM_CATEGORIA, 
TBL_ARTICULOS.PREC_COMPRA, TBL_ARTICULOS.PREC_VENTA, TBL_ARTICULOS.DESCRIPCION, TBL_ARTICULOS.EXISTENCIAS,
TBL_ARTICULOS.ESTADO, TBL_ARTICULOS.ULT_MODIFICACION
FROM TBL_ARTICULOS INNER JOIN TBL_CAT_ARTICULOS ON TBL_ARTICULOS.COD_CATEGORIA = 
TBL_CAT_ARTICULOS.COD_CATEGORIA; 

END


-- SELECT ARTICULO EN ESPECIFICO (SE BUSCA POR COD_ARTICULO)

CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `SELECT_ARTICULOS`()
    SQL SECURITY INVOKER
BEGIN 

SELECT TBL_ARTICULOS.COD_ARTICULO, TBL_ARTICULOS.NOM_ART, TBL_ARTICULOS.COD_CATEGORIA , TBL_CAT_ARTICULOS.NOM_CATEGORIA, 
TBL_ARTICULOS.PREC_COMPRA, TBL_ARTICULOS.PREC_VENTA, TBL_ARTICULOS.DESCRIPCION, TBL_ARTICULOS.EXISTENCIAS,
TBL_ARTICULOS.ESTADO, TBL_ARTICULOS.ULT_MODIFICACION
FROM TBL_ARTICULOS INNER JOIN TBL_CAT_ARTICULOS ON TBL_ARTICULOS.COD_CATEGORIA = 
TBL_CAT_ARTICULOS.COD_CATEGORIA; 

END


-- DELETE CATEGORIA ARTICULO
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `DELETE_CAT_ART`(IN `PI_COD_CATEGORIA` INT)
    SQL SECURITY INVOKER
BEGIN
  DELETE FROM TBL_CAT_ARTICULOS
  WHERE COD_CATEGORIA = PI_COD_CATEGORIA;
  COMMIT;
END

-- DELETE ARTICULO
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `DELETE_ARTICULO`(IN `PI_COD_ARTICULO` INT)
    SQL SECURITY INVOKER
BEGIN
  DELETE FROM TBL_ARTICULOS
  WHERE COD_ARTICULO = PI_COD_ARTICULO;
  COMMIT;
END


-- VER CATEGORIAS DE LOS ARTICULOS

CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `SELECT_CAT_ARTICULO`()
    SQL SECURITY INVOKER
BEGIN 
SELECT * FROM TBL_CAT_ARTICULOS
COMMIT;
END


/*
Descripcion: Procedimientos almacenado que inserta en las tablas del modulo de Ventas.
Autor: Jasmira Romelio Ubidalla
Version: 1.0
*/
-- PV = Parametro Varchar,  PI= Parametro Entero PD= Parametro Decimal



DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `INSERTAR_MET_PAGO`(IN `PV_NOMBRE` VARCHAR(45))
BEGIN

    INSERT INTO TBL_MET_PAGOS_VENT /*En la tabla metodos de pago intserta */
    (NOMBRE, 
    FEC_REGISTRO,
    ULT_MODIFICACION
    ) VALUES(
    PV_NOMBRE,
    now(),
    now());
    
END$$

DELIMITER ;
;



DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `SELECT_MET_PAGO`(IN PI_COD_MET_PAGO INT)
BEGIN

SELECT
    *
FROM
    TBL_MET_PAGOS_VENT
WHERE
    COD_MET_PAGO = PI_COD_MET_PAGO;
    END$$

DELIMITER ;
;




DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `DELETE_MET_PAGO`(IN PI_COD_MET_PAGO INT)
BEGIN
DELETE FROM
    TBL_MET_PAGOS_VENT
WHERE
    COD_MET_PAGO = PI_COD_MET_PAGO;
    END$$

DELIMITER ;
;


DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `UPDATE_MET_PAGO`(IN PV_NOMBRE VARCHAR(45), IN PI_COD_MET_PAGO INT)
BEGIN
-- START TRANSACTION; 

UPDATE TBL_MET_PAGOS_VENT
SET 
    NOMBRE= PV_NOMBRE
  , FEC_REGISTRO = NOW()
  , ULT_MODIFICACION = NOW()
  
  WHERE COD_MET_PAGO = PI_COD_MET_PAGO;
 COMMIT;
 END$$

DELIMITER ;



DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `INSERTAR_VENTA_DETALLES_VENTA`(
-- parametros tabla ventas
  IN PI_COD_CLIENTE INT
, IN PI_COD_USUARIO INT
, IN PD_FECHA DATE
, IN PI_NUM_FACTURA INT
, IN PD_SUB_TOTAL DECIMAL(10,2)
, IN PD_IMPUESTO DECIMAL
, IN PD_TOT_PAGAR DECIMAL(10,2)
, IN PI_COD_MET_PAGO INT
-- PARAMETROS A USAR DE LA TABLA DETALLES DE VENTA
, IN PI_COD_ARTICULO INT
, IN PV_DESCRIPCION VARCHAR (45)
, IN PI_CANTIDAD INT
, IN PD_PRECIO INT
, IN PD_DESCUENTO DECIMAL
, IN PD_TOTAL DECIMAL (10,2)
)
BEGIN
START TRANSACTION;
-- AQUÍ SE INSERTA A LA TABLA VENTAS
INSERT INTO TBL_VENTAS (
 COD_CLIENTE
, COD_USUARIO
, FECHA
, NUM_FACTURA
, SUB_TOTAL
, IMPUESTO
, TOT_PAGAR
, COD_MET_PAGO
, FEC_REGISTRO
, ULT_MODIFICACION
)
 VALUES (
PI_COD_CLIENTE 
, PI_COD_USUARIO 
, PD_FECHA 
, PI_NUM_FACTURA 
, PD_SUB_TOTAL 
, PD_IMPUESTO 
, PD_TOT_PAGAR 
, PI_COD_MET_PAGO 
, now()
, now()
);
-- SELECCIONAR EL MAXIMO INSERTADO EN LA TABLA VENTAS
SELECT @COD_VENTA:= MAX(COD_VENTA) FROM TBL_VENTAS;
SELECT @PRECIO :=(PRECIO) FROM TBL_ARTICULOS WHERE COD_ARTICULO= PI_COD_ARTICULO;

-- AQUÍ SE INSERTA EN LA TABLA DE DETALLES DE VENTAS
INSERT INTO TBL_DETALLES_VENTA(
  COD_VENTA
  , COD_ARTICULO
  , DESCRIPCION
  , CANTIDAD
  , PRECIO
  , DESCUENTO
  , FEC_REGISTRO
  , ULT_MODIFICACION
) VALUES (
  @COD_VENTA
, PI_COD_ARTICULO 
, PV_DESCRIPCION 
, PI_CANTIDAD 
, PD_PRECIO
, PD_DESCUENTO
, PD_TOTAL 
, NOW()
, NOW()
);

-- SELECCIONAR EL MAXIMO INSERTADO EN LA TABLA VENTAS
SELECT @COD_DETALLE_VENTA:= MAX(COD_DETALLE_VENTA) FROM TBL_DETALLES_VENTA;

-- AQUI SE HACE LA ACTUALIZACION DE LA SALIDA DE LOS ARTICULOS 
UPDATE TBL_ARTICULOS
SET TBL_ARTICULOS.EXISTENCIAS=TBL_ARTICULOS.EXISTENCIAS
WHERE COD_ARTICULO=PI_COD_ARTICULO;
END$$

DELIMITER ;
;


DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `SELECT_VENTAS`(
in `PI_COD_VENTA` INT
)
BEGIN

SELECT * FROM TBL_VENTAS
INNER JOIN TBL_CLIENTES ON TBL_VENTAS.COD_CLIENTE = TBL_CLIENTES.COD_CLIENTE
INNER JOIN TBL_USUARIOS ON TBL_VENTAS.COD_USUARIO = TBL_USUARIOS.COD_USUARIO
INNER JOIN TBL_MET_PAGOS_VENT ON TBL_VENTAS.COD_MET_PAGO = TBL_MET_PAGOS_VENT.COD_MET_PAGO
WHERE COD_VENTA LIKE CONCAT('%',PI_COD_VENTA,'%');
END$$

DELIMITER ;
;


DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `UPDATE_VENTAS`(
-- parametros tabla ventas
  IN PI_COD_VENTA INT
, IN PI_COD_CLIENTE INT
, IN PI_COD_USUARIO INT
, IN PD_FECHA DATE
, IN PI_NUM_FACTURA INT
, IN PD_SUB_TOTAL DECIMAL(10,2)
, IN PD_IMPUESTO DECIMAL
, IN PD_TOT_PAGAR DECIMAL(10,2)
, IN PI_COD_MET_PAGO INT
)
BEGIN

UPDATE TBL_VENTAS
SET
COD_VENTA = PI_COD_VENTA
, COD_CLIENTE = PI_COD_CLIENTE
, COD_USUARIO = PI_COD_USUARIO
, FECHA = PD_FECHA
, NUM_FACTURA = PI_NUM_FACTURA 
, SUB_TOTAL = PD_SUB_TOTAL
, IMPUESTO = PD_IMPUESTO
, TOT_PAGAR = PD_TOT_PAGAR
, COD_MET_PAGO = PI_COD_MET_PAGO
WHERE COD_VENTA = PI_COD_VENTA;
END$$

DELIMITER ;
;



DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `DELETE_VENTA`(
IN `PI_COD_VENTA` INT )
BEGIN

 DELETE FROM TBL_VENTAS
 WHERE COD_VENTA = PI_COD_VENTA;

END$$

DELIMITER ;
;


DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `INSERT_DETALLES_VENTA`(
-- PARAMETROS A USAR DE LA TABLA DETALLES DE VENTA
IN PI_COD_VENTA INT
, IN PI_COD_ARTICULO INT
, IN PV_DESCRIPCION VARCHAR (45)
, IN PI_CANTIDAD INT
, IN PD_PRECIO DECIMAL
, IN PD_TOTAL DECIMAL (10,2)
, IN PD_DESCUENTO DECIMAL
)
BEGIN
-- AQUÍ SE INSERTA EN LA TABLA DE DETALLES DE VENTAS

INSERT INTO TBL_DETALLES_VENTA(
  COD_VENTA
  , COD_ARTICULO
  , DESCRIPCION
  , CANTIDAD
  , PRECIO
  , TOTAL
  , DESCUENTO
  , FEC_REGISTRO
  , ULT_MODIFICACION
) VALUES (
  PI_COD_VENTA
, PI_COD_ARTICULO 
, PV_DESCRIPCION 
, PI_CANTIDAD 
, PD_PRECIO
, PD_TOTAL 
, PD_DESCUENTO
, NOW()
, NOW()
);

-- SELECCIONAR EL MAXIMO INSERTADO EN LA TABLA VENTAS
SELECT @COD_DETALLE_VENTA:= MAX(COD_DETALLE_VENTA) FROM TBL_DETALLES_VENTA;
END$$

DELIMITER ;
;


DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `SELECT_DETALLES_VENTA`(
IN PI_COD_DETALLE_VENTA INT
)
BEGIN

SELECT * FROM TBL_DETALLES_VENTA 
INNER JOIN TBL_VENTAS ON TBL_DETALLES_VENTA.COD_VENTA = TBL_VENTAS.COD_VENTA
WHERE COD_DETALLE_VENTA LIKE CONCAT('%', PI_COD_DETALLE_VENTA,'%');

END$$

DELIMITER ;
;


DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `UPDATE_DETALLES_VENTA`(
  IN PI_COD_DETALLES_VENTA INT
, IN PI_COD_ARTICULO INT
, IN PV_DESCRIPCION VARCHAR (45)
, IN PI_CANTIDAD INT
, IN PD_PRECIO DECIMAL
, IN PD_TOTAL DECIMAL (10,2)
, IN PD_DESCUENTO DECIMAL
)
BEGIN

UPDATE TBL_DETALLES_VENTA
SET
  COD_DETALLE_VENTA = PI_COD_DETALLES_VENTA 
, COD_ARTICULO = PI_COD_ARTICULO
, DESCRIPCION = PV_DESCRIPCION 
, CANTIDAD = PI_CANTIDAD 
, PRECIO = PD_PRECIO 
, TOTAL = PD_TOTAL 
, DESCUENTO = PD_DESCUENTO 
WHERE COD_DETALLE_VENTA = PI_COD_DETALLES_VENTA;

END$$

DELIMITER ;
;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `DELETE_DETALLES_VENTA`( 
IN PI_COD_DETALLE_VENTA INT )
BEGIN

DELETE FROM TBL_DETALLES_VENTA
WHERE COD_DETALLE_VENTA = PI_COD_DETALLE_VENTA;

END$$

DELIMITER ;
;
---------------------------------------------------------------------------------------------------------------------------------------------
/*
Descripcion: Procedimientos almacenados tablas del modulo de Reportes.
Autor: Wendy Daniela Sauceda Lopez
Version: 1.0
*/

USE `TIENDASM`;
DROP procedure IF EXISTS `INSERT_REPGENERALES`;

USE `TIENDASM`;
DROP procedure IF EXISTS `TIENDASM`.`INSERT_REPGENERALES`;
;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `INSERT_REPGENERALES`(

-- PV-PARAMETRO VARCHAR, PC-PARAMETRO CHAR, PI-PARAMETRO ENTERO, PD-PARAMETRO FECHA
-- PARAMETROS:

	 IN PV_TITULO VARCHAR(45),
	 IN PV_TIPO_REPORTE VARCHAR(45),
	 IN PV_PERIODO VARCHAR(45),
	 IN PV_FORMATO VARCHAR(10),
	 IN PD_FEC_INICIAL date,
	 IN PD_FEC_FINAL date,
         IN PV_CORREO VARCHAR(50)
     
)
BEGIN
START TRANSACTION;

INSERT INTO `TBL_REP_GENERALES`
(
`TITULO`,
`TIPO_REPORTE`,
`PERIODO`,
`FORMATO`,
`FEC_INICIAL`,
`FEC_FINAL`,
`CORREO`,
`FEC_REGISTRO`,
`ULT_MODIFICACION`
)

VALUES
(
PV_TITULO,
PV_TIPO_REPORTE,
PV_PERIODO,
PV_FORMATO,
PD_FEC_INICIO,
PD_FEC_FINAL,
PV_CORREO,
now(),
now()
);


SELECT @COD_REPORTE := MAX(COD_REPORTE) FROM TBL_REP_GENERALES;

COMMIT;
END$$

DELIMITER ;
;


-------------------------------------------------------------------------------------

USE `TIENDASM`;
DROP procedure IF EXISTS `SELECT_REPORTES`;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `SELECT_REPORTES`(

-- PV-PARAMETRO VARCHAR, PC-PARAMETRO CHAR, PI-PARAMETRO ENTERO, PD-PARAMETRO FECHA
-- PARAMETROS:
	IN PI_CODREPORTE INT
)
SELECT * FROM TBL_REP_GENERALES
WHERE `CODREPORTE` = PI_CODREPORTE$$

DELIMITER ;

USE `TIENDASM`;
DROP procedure IF EXISTS `DELETE_REPGENERALES`;

USE `TIENDASM`;
DROP procedure IF EXISTS `TIENDASM`.`DELETE_REPGENERALES`;
;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `DELETE_REPGENERALES`(IN PI_COD_REPORTE INT)
   SQL SECURITY INVOKER
BEGIN
DELETE FROM
    TBL_REP_GENERALES
WHERE
  COD_REPORTE  = PI_COD_REPORTE;
    END$$

DELIMITER ;
;


---------------------------------------------------------------------------------------
USE `TIENDASM`;
DROP procedure IF EXISTS `DELETE_REPPROGRAMADOS`;

USE `TIENDASM`;
DROP procedure IF EXISTS `TIENDASM`.`DELETE_REPPROGRAMADOS`;
;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `DELETE_REPPROGRAMADOS`(IN `PI_COD_REPORTE` INT)
   SQL SECURITY INVOKER
BEGIN
DELETE FROM
    TBL_REP_PROGRAMADOS
WHERE
  COD_REPORTE  = PI_COD_REPORTE;
    END$$

DELIMITER ;
;


-------------------------------------------------------------------------------------------
USE `TIENDASM`;
DROP procedure IF EXISTS `DELETE_REPHISTORICOS`;

USE `TIENDASM`;
DROP procedure IF EXISTS `TIENDASM`.`DELETE_REPHISTORICOS`;
;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `DELETE_REPHISTORICOS`(IN `PI_COD_REPORTE` INT)
    SQL SECURITY INVOKER
BEGIN
DELETE FROM
    TBL_REP_HISTORICOS
WHERE
  COD_REPORTE  = PI_COD_REPORTE;
    END$$

DELIMITER ;
;


------------------------------------------------------------------------------------------------------------------

USE `TIENDASM`;
DROP procedure IF EXISTS `INSERT_REPROGRAMADOS`;

USE `TIENDASM`;
DROP procedure IF EXISTS `TIENDASM`.`INSERT_REPROGRAMADOS`;
;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `INSERT_REPROGRAMADOS`(

-- PV-PARAMETRO VARCHAR, PC-PARAMETRO CHAR, PI-PARAMETRO ENTERO, PD-PARAMETRO FECHA
-- PARAMETROS:
	 
	IN PV_TITULO VARCHAR(50)
	,IN PV_TIPO_REPORTE  VARCHAR(50)
	,IN PD_FEC_INICIAL  DATE
	,IN PD_FEC_FINAL  DATE
)
BEGIN

INSERT INTO `TBL_REP_PROGRAMADOS`
(
`TITULO`,
`TIPO_REPORTE`,
`FEC_INICIAL`,
`FEC_FINAL`,
`FEC_REGISTRO`,
`ULT_MODIFICACION`
)
VALUES
(
PV_TITULO,
PV_TIPO_REPORTE,
PD_FEC_INICIAL,
PD_FEC_FINAL,
now(),
now()
);

SELECT @COD_REPORTE := MAX(COD_REPORTE) FROM TBL_REP_PROGRAMADOS;

COMMIT;
END$$

DELIMITER ;
;

--------------------------------------------------------------------------------------------------------
USE `TIENDASM`;
DROP procedure IF EXISTS `INSERT_REPHISTORICOS`;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `INSERT_REPHISTORICOS`(

-- PV-PARAMETRO VARCHAR, PC-PARAMETRO CHAR, PI-PARAMETRO ENTERO, PD-PARAMETRO FECHA
-- PARAMETROS:
	 IN PI_COD_REPORTE INT,
	 IN PV_TITULO VARCHAR(50)
	,IN PV_TIPO_REPORTE  VARCHAR(50)
	,IN PV_FORMATO VARCHAR(50)
)
BEGIN

INSERT INTO `TBL_REP_HISTORICOS`
(`COD_REPORTE`,
`TITULO`,
`TIPO_REPORTE`,
`FORMATO`,
`FEC_REGISTRO`,
`ULT_MODIFICACION`
)

VALUES
(PI_COD_REPORTE,
PV_TITULO,
PV_TIPO,
PV_FORMATO,
now(),
now()
);

END$$

DELIMITER ;


USE `TIENDASM`;
DROP procedure IF EXISTS `UPDATE_REPGENERALES`;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `UPDATE_REPGENERALES`(

-- PV-PARAMETRO VARCHAR, PC-PARAMETRO CHAR, PI-PARAMETRO ENTERO, PD-PARAMETRO FECHA
-- PARAMETROS:
     IN PI_COD_REPORTE INT,
	 IN PV_TITULO VARCHAR(45),
	 IN PV_TIPO_REPORTE VARCHAR(45),
	 IN PV_PERIODO VARCHAR(45),
	 IN PV_FORMATO VARCHAR(10),
	 IN PD_FEC_INICIAL date,
	 IN PD_FEC_FINAL date,
     IN PV_CORREO VARCHAR(50)
     )
     BEGIN
UPDATE TBL_REP_GENERALES
SET
COD_REPORTE = PI_COD_REPORTE,
TITULO = PV_TITULO,
TIPO_REPORTE = PV_TIPO_REPORTE,
PV_PERIODO = PV_PERIODO,
FORMATO = PV_FORMATO,
FEC_INICIAL = PD_FEC_INICIAL,
FEC_FINAL = PD_FEC_FINAL,
CORREO = PV_CORREO
WHERE COD_REPORTE = PI_COD_REPORTE;
END$$

DELIMITER ;

--------------------------------------------------------------------------------------------------------
USE `TIENDASM`;
DROP procedure IF EXISTS `UPDATE_REPROGRAMADOS`;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `UPDATE_REPROGRAMADOS`(

-- PV-PARAMETRO VARCHAR, PC-PARAMETRO CHAR, PI-PARAMETRO ENTERO, PD-PARAMETRO FECHA
-- PARAMETROS:
     IN PI_COD_REPORTE INT,
	 IN PV_TITULO VARCHAR(45),
	 IN PV_TIPO_REPORTE VARCHAR(45),
	 IN PD_FEC_INICIAL date,
	 IN PD_FEC_FINAL date
     )
BEGIN
UPDATE TBL_REP_PROGRAMADOS
SET
COD_REPORTE = PI_COD_REPORTE,
TITULO = PV_TITULO,
TIPO_REPORTE = PV_TIPO_REPORTE,
FEC_INICIAL = PD_FEC_INICIAL,
FEC_FINAL = PD_FEC_FINAL

WHERE COD_REPORTE = PI_COD_REPORTE;
END$$

DELIMITER ;

USE `TIENDASM`;
DROP procedure IF EXISTS `UPDATE_HISTORICOS`;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `UPDATE_HISTORICOS`(

-- PV-PARAMETRO VARCHAR, PC-PARAMETRO CHAR, PI-PARAMETRO ENTERO, PD-PARAMETRO FECHA
-- PARAMETROS:
     IN PI_COD_REPORTE INT,
	 IN PV_TITULO VARCHAR(45),
	 IN PV_TIPO_REPORTE VARCHAR(45),
	 IN PV_FORMATO VARCHAR(10)
	 
     )
BEGIN
UPDATE TBL_REP_HISTORICOS
SET
COD_REPORTE = PI_COD_REPORTE,
TITULO = PV_TITULO,
TIPO_REPORTE = PV_TIPO_REPORTE,
FORMATO = PV_FORMATO

WHERE COD_REPORTE = PI_COD_REPORTE;
END$$

DELIMITER ;


USE `TIENDASM`;
DROP procedure IF EXISTS `SELECT_REPROGRAMADOS`;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `SELECT_REPROGRAMADOS`(

-- PV-PARAMETRO VARCHAR, PC-PARAMETRO CHAR, PI-PARAMETRO ENTERO, PD-PARAMETRO FECHA
-- PARAMETROS:
	IN PI_COD_REPORTE INT
)
SELECT * FROM TBL_REP_PROGRAMADOS
WHERE `COD_REPORTE` = PI_COD_REPORTE$$

DELIMITER ;
USE `TIENDASM`;
DROP procedure IF EXISTS `SELECT_REPHISTORICOS`;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `SELECT_REPHISTORICOS`(

-- PV-PARAMETRO VARCHAR, PC-PARAMETRO CHAR, PI-PARAMETRO ENTERO, PD-PARAMETRO FECHA
-- PARAMETROS:
	IN PI_COD_REPORTE INT
)
SELECT * FROM TBL_REP_HISTORICOS
WHERE `COD_REPORTE` = PI_COD_REPORTE$$

DELIMITER ;


/*MODULO DE COMPRAS
COMPRAS
TERMINOS_PAGO_COMPRAS
ORDENES DE COMPRAS
DEVOLUCIONES_COMPRAS
ARCHIVO_FACTURAS_COMPRAS
PROCEDIMIENTOS ALMACENADOS TRANSACIONALES
(INSERT,DELETE,UPDATE,SELECT)
AUTORAS: MARYS OLIVA & DORIS IZAGUIRRE
VERSION: 1.0     
*/
-- INSERTAR COMPRAS--
USE `TIENDASM`;
DROP procedure IF EXISTS `INSERTAR_COMPRA`;

USE `TIENDASM`;
DROP procedure IF EXISTS `TIENDASM`.`INSERTAR_COMPRA`;
;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `INSERTAR_COMPRA`(
/*
NOMBRE: INSERTAR_COMPRA
*/
-- PV = PARAMETRO VARCHAR, PC= PARAMETRO CHAR, PI= PARAMETRO ENTERO,
-- PD= PARAMETRO DATE , PDT= PARAMETRO DATETIME
-- PARAMETROS:
  
  IN PI_COD_PROVEEDOR int
 ,IN PI_COD_ARTICULO int
 ,IN PI_NUM_FACTURA int
 ,IN PD_FECHA date
 ,IN PI_COD_TER_PAGO int
 ,IN PI_CANTIDAD int
 ,IN PI_COS_UNITARIO int
 ,IN PI_TOT_COMPRA int
 


)
BEGIN
START TRANSACTION;
-- INSERTARDO LA TABLA DE COMPRAS--
INSERT INTO TBL_COMPRAS(
 COD_PROVEEDOR
,COD_ARTICULO
,NUM_FACTURA
,FECHA
,COD_TER_PAGO
,CANTIDAD
,COS_UNITARIO
,TOT_COMPRA
,FEC_REGISTRO
,ULT_MODIFICACION
)

VALUES(
  PI_COD_PROVEEDOR
 ,PI_COD_ARTICULO
 ,PI_NUM_FACTURA 
 ,PD_FECHA
 ,PI_COD_TER_PAGO
 ,PI_CANTIDAD
 ,PI_COS_UNITARIO
 ,PI_TOT_COMPRA
 ,now()
 ,now()
);

SELECT 
    @COD_COMPRA:=MAX(COD_COMPRA)
FROM
   TBL_COMPRAS;

 
 -- PROVEEDOR--
 SELECT 
 @COD_PROVEEDOR:=MAX(COD_PROVEEDOR)
FROM
   TBL_PROVEEDORES;

    
 -- ARTICULO --
 SELECT 
 @COD_ARTICULO:=MAX(COD_ARTICULO)
FROM
   TBL_ARTICULOS; 


-- ACTUALIZANDO CANTIDAD DE ARTICULOS EN EXISTENCIA SUMANDO LOS ARTICULOS COMPRADOS
UPDATE TBL_ARTICULOS
SET TBL_ARTICULOS.EXISTENCIAS = TBL_ARTICULOS.EXISTENCIAS + PI_CANTIDAD,
    FEC_REGISTRO = now()
WHERE COD_ARTICULO = PI_COD_ARTICULO;
 
 
COMMIT;
END$$

DELIMITER ;
;

-- INSERTAR_TERMINO_PAGOS_COMPRAS--
USE `TIENDASM`;
DROP procedure IF EXISTS `INSERTAR_TER_PAGOS_COMP`;

USE `TIENDASM`;
DROP procedure IF EXISTS `TIENDASM`.`INSERTAR_TER_PAGOS_COMP`;
;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `INSERTAR_TER_PAGOS_COMP`(


-- Parametros:

 IN PV_NOMBRE varchar(45) 
,IN PV_DESCRIPCION varchar(100) 

)
BEGIN
-- INSERTARDO LA TABLA TERMINOS DE PAGOS COMPRAS--
INSERT INTO TBL_TER_PAGOS_COMP(
 NOMBRE  
,DESCRIPCION  
,FEC_REGISTRO
,ULT_MODIFICACION
)
VALUES(
 PV_NOMBRE
,PV_DESCRIPCION 
 ,now()
 ,now()
);
COMMIT;
END$$

DELIMITER ;
;

-- INSERTAR_ORDEN_DE_COMPRA--

USE `TIENDASM`;
DROP procedure IF EXISTS `INSERTAR_ORDEN_COMP`;

USE `TIENDASM`;
DROP procedure IF EXISTS `TIENDASM`.`INSERTAR_ORDEN_COMP`;
;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `INSERTAR_ORDEN_COMP`(

-- PV = PARAMETRO VARCHAR, PC= PARAMETRO CHAR, PI= PARAMETRO ENTERO,
-- PD= PARAMETRO DATE , PDT= PARAMETRO DATETIME
-- PARAMETROS:

IN PI_COD_COMPRA int 
,IN PD_FEC_PEDIDO date 
,IN PD_FEC_ENTREGA date 
,IN PV_LUGAR_ENTREGA varchar(50) 
,IN PI_COD_ARTICULO int
,IN PI_CANTIDAD int 

)
BEGIN
START TRANSACTION;
-- INSERTANDO LA TABLA DE ORDENES DE COMPRA--
INSERT INTO TBL_ORDENES_COMP(
COD_COMPRA 
,FEC_PEDIDO 
,FEC_ENTREGA
,LUGAR_ENTREGA
,COD_ARTICULO 
,CANTIDAD 
,FEC_REGISTRO 
,ULT_MODIFICACION 

)
VALUES (
 PI_COD_COMPRA
,PD_FEC_PEDIDO 
,PD_FEC_ENTREGA  
,PV_LUGAR_ENTREGA 
,PI_COD_ARTICULO 
,PI_CANTIDAD
,now()
,now()
);
SELECT 
 @COD_ORDEN_COMP:=MAX(COD_ORDEN_COMP)
FROM 
  TBL_ORDENES_COMP;
  
SELECT 
 @COD_COMPRA:=MAX(COD_COMPRA)
FROM 
 TBL_COMPRAS;
 
 SELECT 
 @COD_ARTICULO:=MAX(COD_ARTICULO)
FROM 
 TBL_ARTICULOS;

  
  COMMIT;
END$$

DELIMITER ;
;

-- INSERTAR_DEVOLUCIONES_DE_COMPRAS--

USE `TIENDASM`;
DROP procedure IF EXISTS `INSERTAR_DEVOLUCIONES_COMPRA`;

USE `TIENDASM`;
DROP procedure IF EXISTS `TIENDASM`.`INSERTAR_DEVOLUCIONES_COMPRA`;
;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `INSERTAR_DEVOLUCIONES_COMPRA`(

-- PV = PARAMETRO VARCHAR, PC= PARAMETRO CHAR, PI= PARAMETRO ENTERO,
-- PD= PARAMETRO DATE , PDT= PARAMETRO DATETIME
-- PARAMETROS:

 IN PI_COD_ORDEN_COMP int 
,IN PV_DESCR_DEVOLUCION varchar(100)
,IN PI_CANTIDAD int 
,IN PI_TOTAL int

)
BEGIN
START TRANSACTION;
-- INSERTANDO LA TABLA DE DEVOLUCIONES DE COMPRA--
INSERT INTO TBL_DEVOLUCIONES_COMP(
COD_ORDEN_COMP
,DESCR_DEVOLUCION 
,CANTIDAD
,TOTAL
,FEC_REGISTRO 
,ULT_MODIFICACION

)

VALUES (
PI_COD_ORDEN_COMP
,PV_DESCR_DEVOLUCION 
,PI_CANTIDAD 
,PI_TOTAL 
,now()
,now()
);

SELECT 
 @COD_DEVOLUCION_COMPRA:=MAX(COD_DEVOLUCION_COMPRA)
FROM 
  TBL_DEVOLUCIONES_COMP;
  
SELECT 
 @COD_ORDEN_COMP:=MAX(COD_ORDEN_COMP)
FROM 
 TBL_ORDENES_COMP;
 


COMMIT;
END$$

DELIMITER ;
;

-- INSERTAR_FACTURAS_COMPRAS--
USE `TIENDASM`;
DROP procedure IF EXISTS `INSERTAR_FACTURAS_COMPRAS`;

USE `TIENDASM`;
DROP procedure IF EXISTS `TIENDASM`.`INSERTAR_FACTURAS_COMPRAS`;
;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `INSERTAR_FACTURAS_COMPRAS`(

-- PV = PARAMETRO VARCHAR, PC= PARAMETRO CHAR, PI= PARAMETRO ENTERO,
-- PD= PARAMETRO DATE , PDT= PARAMETRO DATETIME
-- PARAMETROS:

 IN PI_COD_ORDEN_COMP int 
,IN PI_COD_COMPRA int 
,IN PD_FEC_INGRESO date 
,IN PV_TIPO_COMPRA varchar(45) 
,IN PV_ESTADO varchar(45) 
,IN PV_FACT_FISICA varchar(45) 


)
BEGIN
START TRANSACTION;
-- INSERTANDO LA TABLA DE ORDENES DE COMPRA--
INSERT INTO TBL_FACTURAS_COMPRAS(
COD_ORDEN_COMP
,COD_COMPRA
,FEC_INGRESO
,TIPO_COMPRA 
,ESTADO 
,FACT_FISICA 
,FEC_REGISTRO 
,ULT_MODIFICACION
)
VALUES (
PI_COD_ORDEN_COMP
,PI_COD_COMPRA
,PD_FEC_INGRESO
,PV_TIPO_COMPRA
,PV_ESTADO 
,PV_FACT_FISICA
,now()
,now()

);

SELECT 
 @COD_ARCH_FACT_COMPRA:=MAX(COD_ARCH_FACT_COMPRA)
FROM 
  TBL_FACTURAS_COMPRAS;
  
SELECT 
 @COD_ORDEN_COMP:=MAX(COD_ORDEN_COMP)
FROM 
 TBL_ORDENES_COMP;
 
 SELECT 
 @COD_COMPRA:=MAX(COD_COMPRA)
FROM 
 TBL_COMPRAS;

 COMMIT;
END$$

DELIMITER ;
;

-- DELETE_COMPRAS--
USE `TIENDASM`;
DROP procedure IF EXISTS `DELETE_COMPRAS`;

USE `TIENDASM`;
DROP procedure IF EXISTS `TIENDASM`.`DELETE_COMPRAS`;
;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `DELETE_COMPRAS`(
 IN PI_COD_COMPRA INT)
    SQL SECURITY INVOKER
    
BEGIN
DELETE FROM 
    TBL_COMPRAS
WHERE
    COD_COMPRA = PI_COD_COMPRA;
    commit;
    END$$

DELIMITER ;
;

-- DELETE_TERMINO_PAGOS_COMPRAS--
USE `TIENDASM`;
DROP procedure IF EXISTS `DELETE_TER_PAGOS_COMP`;

USE `TIENDASM`;
DROP procedure IF EXISTS `TIENDASM`.`DELETE_TER_PAGOS_COMP`;
;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `DELETE_TER_PAGOS_COMP`(IN PI_COD_TER_PAGO int)
    SQL SECURITY INVOKER
    
BEGIN
DELETE FROM
	TBL_TER_PAGOS_COMP
WHERE
    COD_TER_PAGO = PI_COD_TER_PAGO;
    commit;
END$$

DELIMITER ;
;

-- DELETE_ORDEN_COMPRAS--

USE `TIENDASM`;
DROP procedure IF EXISTS `DELETE_ORDENES_COMP`;

USE `TIENDASM`;
DROP procedure IF EXISTS `TIENDASM`.`DELETE_ORDENES_COMP`;
;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `DELETE_ORDENES_COMP`(IN PI_COD_ORDEN_COMP INT)
    SQL SECURITY INVOKER
    
BEGIN
DELETE FROM
   TBL_ORDENES_COMP
WHERE
   COD_ORDEN_COMP = PI_COD_ORDEN_COMP;
   commit;
    END$$

DELIMITER ;
;

-- DELETE_DEVOLUCIONES_COMPRAS--
USE `TIENDASM`;
DROP procedure IF EXISTS `DELETE_DEVOLUCIONES_COMP`;

USE `TIENDASM`;
DROP procedure IF EXISTS `TIENDASM`.`DELETE_DEVOLUCIONES_COMP`;
;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `DELETE_DEVOLUCIONES_COMP`(IN PI_COD_DEOLUCION_COMPRA int)
    SQL SECURITY INVOKER
    
BEGIN
DELETE FROM
	TBL_DEVOLUCIONES_COMP
WHERE
    COD_DEVOLUCION_COMPRA = PI_COD_DEVOLUCION_COMPRA;
    commit;
END$$

DELIMITER ;
;

-- DELETE_FACTURAS_COMPRAS--
USE `TIENDASM`;
DROP procedure IF EXISTS `DELETE_FACTURAS_COMP`;

USE `TIENDASM`;
DROP procedure IF EXISTS `TIENDASM`.`DELETE_FACTURAS_COMP`;
;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `DELETE_FACTURAS_COMP`(IN PI_COD_ARCH_FACT_COMPRA int)
    SQL SECURITY INVOKER
    
BEGIN
DELETE FROM
    TBL_FACTURAS_COMP
WHERE
    COD_ARCH_FACT_COMPRA = PI_COD_ARCH_FACT_COMPRA;
    commit;
END$$

DELIMITER ;
;


-- UPDATE_COMPRAS--

USE `TIENDASM`;
DROP procedure IF EXISTS `UPDATE_COMPRAS`;

USE `TIENDASM`;
DROP procedure IF EXISTS `TIENDASM`.`UPDATE_COMPRAS`;
;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `UPDATE_COMPRAS`(

-- PV = PARAMETRO VARCHAR, PC= PARAMETRO CHAR, PI= PARAMETRO ENTERO,
-- PD= PARAMETRO DATE , PDT= PARAMETRO DATETIME
-- PARAMETROS:

IN PI_COD_COMPRA INT, 
IN PI_COD_PROVEEDOR int, 
IN PI_COD_ARTICULO int,
in PI_NUM_FACTURA int, 
in PD_FECHA DATE, 
IN PI_COD_TER_PAGO INT,
in PI_CANTIDAD int, 
in PI_COS_UNITARIO int, 
in PI_TOT_COMPRA int

 )
BEGIN
START TRANSACTION; 
UPDATE TBL_COMPRAS
SET 
   -- COD_COMPRA = PI_COD_COMPRA
	COD_PROVEEDOR = PI_COD_PROVEEDOR 
	,COD_ARTICULO = PI_COD_ARTICULO 
	,NUM_FACTURA = PI_NUM_FACTURA 
	,FECHA = PD_FECHA
	,COD_TER_PAGO = PI_COD_TER_PAGO 
	,CANTIDAD = PI_CANTIDAD
	,COS_UNITARIO = PI_COS_UNITARIO
	,TOT_COMPRA = PI_TOT_COMPRA
	,FEC_REGISTRO=NOW()
	,ULT_MODIFICACION=NOW()
    
WHERE COD_COMPRA = PI_COD_COMPRA;

SELECT 
    @COD_COMPRA:=MAX(COD_COMPRA)
FROM
    TBL_COMPRAS;
    
select
 @COD_PROVEEDOR:=MAX(COD_PROVEEDOR)
FROM 
TBL_PROVEEDORES;
    
SELECT 
    @COD_ARTICULO:=MAX(COD_ARTICULO)
FROM
    TBL_ARTICULOS;
    
    SELECT 
    @COD_TER_PAGO:=MAX(COD_TER_PAGO)
FROM
   TBL_TER_PAGOS_COMP;
    
 COMMIT;
 END$$

DELIMITER ;
;


-- UPDATE_TERMINOS_PAGOS_COMPRA--
USE `TIENDASM`;
DROP procedure IF EXISTS `TIENDASM`.`UPDATE_TER_PAGOS_COMP`;
;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE  `UPDATE_TER_PAGOS_COMP`(

-- PV = PARAMETRO VARCHAR, PC= PARAMETRO CHAR, PI= PARAMETRO ENTERO,
-- PD= PARAMETRO DATE , PDT= PARAMETRO DATETIME
-- PARAMETROS:

  IN  PI_COD_TER_PAGO INT
  ,IN PV_NOMBRE varchar(45) 
  ,IN PV_DESCRIPCION varchar(100) 
)
BEGIN
START TRANSACTION; 
UPDATE TBL_TER_PAGOS_COMP
SET 
   -- TER_PAGOS_COMP = PI_TER_PAGOS_COMP
    COD_TER_PAGO=PI_COD_TER_PAGO
   ,NOMBRE=PV_NOMBRE
   ,DESCRIPCION=PV_DESCRIPCION 
   
   WHERE  COD_TER_PAGO=PI_COD_TER_PAGO;
   SELECT 
    @COD_TER_PAGO:=MAX(COD_TER_PAGO)
FROM
    TBL_TER_PAGOS_COMP;
   
COMMIT;

END$$

DELIMITER ;
;

-- UPDATE_ORDENES_COMP--
USE `TIENDASM`;
DROP procedure IF EXISTS `UPDATE_ORDENES_COMP`;

USE `TIENDASM`;
DROP procedure IF EXISTS `TIENDASM`.`UPDATE_ORDENES_COMP`;
;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `UPDATE_ORDENES_COMP`( 
IN PI_COD_ORDEN_COMP int 
,IN PI_COD_COMPRA int 
,IN PD_FEC_PEDIDO date 
,IN PD_FEC_ENTREGA date 
,IN PV_LUGAR_ENTREGA varchar(100) 
,IN PI_COD_ARTICULO int 
,IN PI_CANTIDAD int 

)
BEGIN
START TRANSACTION; 
UPDATE TBL_ORDENES_COMP
SET 
   -- COD_ORDEN_COMP =PI_COD_ORDEN_COMP
COD_ORDEN_COMP=PI_COD_ORDEN_COMP
,COD_COMPRA=PI_COD_COMPRA 
,FEC_PEDIDO=D_FEC_PEDIDO
,FEC_ENTREGA=PD_FEC_ENTREGA
,LUGAR_ENTREGA=PV_LUGAR_ENTREGA
,COD_ARTICULO= PI_COD_ARTICULO 
,CANTIDAD=PI_CANTIDAD 
,FEC_REGISTRO=now()
,ULT_MODIFICACION =now()

WHERE COD_ORDEN_COMP = PI_COD_ORDEN_COMP;

SELECT 
    @COD_ORDEN_COMP:=MAX(COD_ORDEN_COMP)
FROM
   TBL_ORDENES_COMP;
    
select
 @COD_PROVEEDOR:=MAX(COD_PROVEEDOR)
FROM 
TBL_PROVEEDORES;
    
SELECT 
    @COD_ARTICULO:=MAX(COD_ARTICULO)
FROM
    TBL_ARTICULOS;
    
   
    
 COMMIT;
END$$

DELIMITER ;
;


-- UPDATE__DEVOLUCION_COMPRA--
USE `TIENDASM`;
DROP procedure IF EXISTS `UPDATE__DEVOLUCION_COMPRA`;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `UPDATE__DEVOLUCION_COMPRA` (

-- PV = PARAMETRO VARCHAR, PC= PARAMETRO CHAR, PI= PARAMETRO ENTERO,
-- PD= PARAMETRO DATE , PDT= PARAMETRO DATETIME
-- PARAMETROS:


IN PI_COD_DEVOLUCION_COMPRA int 
,IN PI_COD_ORDEN_COMP int 
,IN PV_DESCR_DEVOLUCION varchar(100) 
,IN PI_CANTIDAD int 
,IN PI_TOTAL int
)
BEGIN
START TRANSACTION; 
UPDATE TBL_DEVOLUCIONES_COMP
SET 
   -- COD_DEVOLUCION_COMPRA = PI_COD_DEVOLUCION_COMPRA
COD_DEVOLUCION_COMPRA=PI_COD_DEVOLUCION_COMPRA
,COD_ORDEN_COMP=PI_COD_ORDEN_COMP
,DESCR_DEVOLUCION =PV_DESCR_DEVOLUCION 
,CANTIDAD=PI_CANTIDAD
,TOTAL=PI_TOTAL
,FEC_REGISTRO=NOW()
,ULT_MODIFICACION=now()

WHERE COD_DEVOLUCION_COMPRA= PI_COD_DEVOLUCION_COMPRA;

SELECT 
    @COD_DEVOLUCION_COMPRA:=MAX(COD_DEVOLUCION_COMPRA)
FROM
    TBL_DEVOLUCIONES_COMP;
    
select
 @COD_ORDEN_COMP:=MAX(COD_ORDEN_COMP)
FROM 
TBL_ODENES_COMP;
    

    
 COMMIT;
END$$

DELIMITER ;

-- UPDATE_FACTURAS_COMPRAS--
USE `TIENDASM`;
DROP procedure IF EXISTS `UPDATE_FACTURAS_COMPRAS`;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `UPDATE_FACTURAS_COMPRAS` (

-- PV = PARAMETRO VARCHAR, PC= PARAMETRO CHAR, PI= PARAMETRO ENTERO,
-- PD= PARAMETRO DATE , PDT= PARAMETRO DATETIME
-- PARAMETROS:

IN PI_COD_ARCH_FACT_COMPRA int
,IN PI_COD_ORDEN_COMP int 
,IN PI_COD_COMPRA int 
,IN PD_FEC_INGRESO date 
,IN PV_TIPO_COMPRA varchar(45) 
,IN PV_ESTADO varchar(45) 
,IN PV_FACT_FISICA varchar(45)
)
BEGIN
START TRANSACTION; 
UPDATE TBL_FACTURAS_COMPRAS
SET 
   -- COD_ARCH_FACT_COMPRA= PI_COD_ARCH_FACT_COMPRA
COD_ARCH_FACT_COMPRA=PI_COD_ARCH_FACT_COMPRA
,COD_ORDEN_COMP=PI_COD_ORDEN_COMP
,COD_COMPRA= PI_COD_COMPRA
,FEC_INGRESO=PD_FEC_INGRESO
,TIPO_COMPRA =PV_TIPO_COMPRA
,ESTADO=PV_ESTAD
,FACT_FISICA=PV_FACT_FISICA
,FEC_REGISTRO=NOW()
,ULT_MODIFICACION=NOW()

WHERE COD_ARCH_FACT_COMPRA = COD_ARCH_FACT_COMPRA;

SELECT 
    @COD_ARCH_FACT_COMPRA:=MAX(COD_ARCH_FACT_COMPRA)
FROM
   TBL_FACTURAS_COMPRAS;
    
SELECT 
    @COD_ORDEN_COMP:=MAX(COD_ORDEN_COMP)
FROM
   TBL_ORDENES_COMP;
   
   SELECT 
    @COD_COMPRA:=MAX(COD_COMPRA)
FROM
    TBL_COMPRAS;
   
   
   
 COMMIT;

END$$

DELIMITER ;

-- SELECT_COMPRAS--
USE `TIENDASM`;
DROP procedure IF EXISTS `SELECT_COMPRAS`;

USE `TIENDASM`;
DROP procedure IF EXISTS `TIENDASM`.`SELECT_COMPRAS`;
;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `SELECT_COMPRAS`()
BEGIN
SELECT `TBL_COMPRAS`.`COD_COMPRA` AS `CODIGO DE COMPRAS`,`TBL_COMPRAS`.`COD_PROVEEDOR` AS `CODIDO DE PROVEEDOR`, `TBL_COMPRAS`.`COD_ARTICULO` AS `CODIGO DE ARTICULO`, `TBL_COMPRAS`.`NUM_FACTURA`,`TBL_COMPRAS`.`FECHA`,`TBL_COMPRAS`.`COD_TER_PAGO` AS `CODIGO DE PAGO`,`TBL_COMPRAS`.`CANTIDAD`,`TBL_COMPRAS`.`COS_UNITARIO` AS `COSTO UNITARIO `, `TBL_COMPRAS`.`TOT_COMPRA`, `TBL_COMPRAS`.`FEC_REGISTRO`,`TBL_COMPRAS`.`ULT_MODIFICACION`, `TBL_PROVEEDORES`.`COD_PROVEEDOR`, `TBL_PROVEEDORES`.`NOMBRE_PROVEEDOR`,`TBL_ARTICULOS`.`COD_ARTICULO`,`TBL_ARTICULOS`.`NOM_ART` AS `NOMBRE ARTICULO`
FROM `TBL_COMPRAS` 
	INNER JOIN `TBL_PROVEEDORES` ON `TBL_COMPRAS`.`COD_PROVEEDOR` = `TBL_PROVEEDORES`.`COD_PROVEEDOR`
    INNER JOIN `TBL_ARTICULOS` ON `TBL_COMPRAS`.`COD_ARTICULO` = `TBL_ARTICULOS`.`COD_ARTICULO`

	;
    

END$$

DELIMITER ;
;




-- SELECT_TERMINOS_PAGOS_COMP--
USE `TIENDASM`;
DROP procedure IF EXISTS `SELECT_TERMINOS_PAGOS_COMP`;

USE `TIENDASM`;
DROP procedure IF EXISTS `TIENDASM`.`SELECT_TERMINOS_PAGOS_COMP`;
;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `SELECT_TERMINOS_PAGOS_COMP`()
BEGIN
SELECT `TBL_TER_PAGOS_COMP`.`COD_TER_PAGO` AS `CODIGO TERMINO PAGO`,`TBL_TER_PAGOS_COMP`.`NOMBRE`AS `NOMBRE TERMINO PAGO`,`TBL_TER_PAGOS_COMP`.`DESCRIPCION` AS `DESCRIPCION TERMINO PAGO` ,`TBL_TER_PAGOS_COMP`.`FEC_REGISTRO`,`TBL_TER_PAGOS_COMP`.`ULT_MODIFICACION`
FROM `TBL_TER_PAGOS_COMP`
;
END$$

DELIMITER ;
;

-- SELECT ORDENES COMPRA--
USE `TIENDASM`;
DROP procedure IF EXISTS `SELECT_ORDENES_COMP`;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `SELECT_ORDENES_COMP`()

BEGIN
SELECT `TBL_ORDENES_COMP`.`COD_ORDEN_COMP` AS `CODIGO ORDEN COMPRA`,`TBL_ORDENES_COMP`.`COD_COMPRA` AS `CODIDO DE COMPRA`, `TBL_ORDENES_COMP`.`COD_ARTICULO` AS `CODIGO DE ARTICULO`, `TBL_ORDENES_COMP`.`FEC_PEDIDO`,`TBL_ORDENES_COMP`.`FEC_ENTREGA`,`TBL_ORDENES_COMP`.`LUGAR_ENTREGA`, `TBL_ORDENES_COMP`.`CANTIDAD`,`TBL_ORDENES_COMP`.`FEC_REGISTRO`,`TBL_ORDENES_COMP`.`ULT_MODIFICACION`
FROM `TBL_ORDENES_COMP` 
INNER JOIN `TBL_COMPRAS` ON `TBL_ORDENES_COMP`.`COD_COMPRA` = `TBL_COMPRAS`.`COD_COMPRA`
INNER JOIN `TBL_ARTICULOS` ON `TTBL_ORDENES_COMP`.`COD_ARTICULO` = `TBL_ARTICULOS`.`COD_ARTICULO`

;
END$$

DELIMITER ;

-- SELECT_DEVOLUCIONES_COMPRA--
USE `TIENDASM`;
DROP procedure IF EXISTS `SELECT_DEVOLUCIONES_COMPRA`;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `SELECT_DEVOLUCIONES_COMPRA`()
BEGIN
SELECT `TBL_DEVOLUCIONES_COMP`.`COD_DEVOLUCION_COMPRA` AS `CODIGO DEVOLUCIONES COMPRA`,`TBL_DEVOLUCIONES_COMP`.`COD_ORDEN_COMP` AS `CODIDO ORDEN DE COMPRA`, `TBL_DEVOLUCIONES_COMP`.`DESCR_DEVOLUCION` AS `DESCRIPCION DE LA DEVOLUCION`, `TBL_DEVOLUCIONES_COMP`.`CANTIDA`,`TBL_DEVOLUCIONES_COMP`.`TOTAL`,`TBL_DEVOLUCIONES_COMP`.`FEC_REGISTRO`,`TBL_DEVOLUCIONES_COMP`.`ULT_MODIFICACION`
FROM `TBL_DEVOLUCIONES_COMP` 
INNER JOIN `TBL_ORDENES_COMP` ON `TBL_DEVOLUCIONES_COMP`.`COD_ORDEN_COMP` = `TBL_ORDENES_COMP`.`COD_ORDEN_COMP`
;
END$$

DELIMITER ;
-- SELECT_FACTURAS_COMPRAS--

USE `TIENDASM`;
DROP procedure IF EXISTS `SELECT_FACTURAS_COMPRAS`;

DELIMITER $$
USE `TIENDASM`$$
CREATE DEFINER=`TIENDASM`@`%` PROCEDURE `SELECT_FACTURAS_COMPRAS`()
BEGIN
SELECT `TBL_FACTURAS_COMPRAS`.`COD_ARCH_FACT_COMPRA` AS `CODIGO ARCHIVO FACTURA`,`TBL_FACTURAS_COMPRAS`.`COD_ORDEN_COMP` AS `CODIDO ORDEN DE COMPRA`, `TBL_FACTURAS_COMPRAS`.`COD_COMPRA` AS `CODIGO DECOMPRA`, `TBL_FACTURAS_COMPRAS`.`FEC_INGRESO`,`TBL_FACTURAS_COMPRAS`.`TIPO_COMPRA`,`TBL_FACTURAS_COMPRAS`.`ESTADO`, `TBL_FACTURAS_COMPRAS`.`FACT_FISICA`,`TBL_FACTURAS_COMPRAS`.`FEC_REGISTRO`,`TBL_FACTURAS_COMPRAS`.`ULT_MODIFICACION`
FROM `TBL_FACTURAS_COMPRAS` 
INNER JOIN `TBL_ORDENES_COMP` ON `TBL_FACTURAS_COMPRAS`.`COD_ORDEN_COMP` = `TBL_ORDENES_COMP`.`COD_ORDEN_COMP`
INNER JOIN `TBL_COMPRAS` ON `TBL_FACTURAS_COMPRAS`.`COD_COMPRA` = `TBL_COMPRAS`.`COD_COMPRA`
;
END$$

DELIMITER ;










-- INSERTAR BIACORA--
/* PROCEDIMINETO DE INSERT*/
DROP procedure IF EXISTS `INSERTAR_BITACORA`;

DELIMITER $$
USE `TIENDASM`$$
CREATE PROCEDURE `INSERTAR_BITACORA`(
           IN cod_bita INT,       
		IN tbl_nom VARCHAR(50),
        IN fec_edici DATETIME,
        IN fec_creaci DATETIME,
        IN usr_registro VARCHAR(20),
        IN usr_modificacion VARCHAR(20),
        IN accion_reali VARCHAR(50),
        IN cam_1 varchar(255),
        IN cam_2 varchar(255),
        IN cam_3 varchar(255),
        IN cam_4 varchar(255),
        IN cam_5 varchar(255),
        IN cam_6 varchar(255),
        IN cam_7 varchar(255),
        IN cam_8 varchar(255),
        IN cam_9 varchar(255),
        IN cam_10 varchar(255),
        IN cam_11 varchar(255),
        IN cam_12 varchar(255),
        IN cam_13 varchar(255),
        IN cam_14 varchar(255),
        IN cam_15 varchar(255),
        IN cam_16 varchar(255),
        IN cam_17 varchar(255),
        IN cam_18 varchar(255),
        IN cam_19 varchar(255),
        IN cam_20 varchar(255),
        IN cam_21 varchar(255),
        IN cam_22 varchar(255),
        IN cam_23 varchar(255),
        IN cam_24 varchar(255),
        IN cam_25 varchar(255),
        IN cam_26 varchar(255),
        IN cam_27 varchar(255),
        IN cam_28 varchar(255),
        IN cam_29 varchar(255),
        IN cam_30 varchar(255),
        IN cam_31 varchar(255),
        IN cam_32 varchar(255),
        IN cam_33 varchar(255),
        IN cam_34 varchar(255),
        IN cam_35 varchar(255),
        IN cam_36 varchar(255),
        IN cam_37 varchar(255),
        IN cam_38 varchar(255),
        IN cam_39 varchar(255),
        IN cam_40 varchar(255),
        IN cam_41 varchar(255),
        IN cam_42 varchar(255),
        IN cam_43 varchar(255),
        IN cam_44 varchar(255),
        IN cam_45 varchar(255),
        IN cam_46 varchar(255),
        IN cam_47 varchar(255),
        IN cam_48 varchar(255),
        IN cam_49 varchar(255),
        IN cam_50 varchar(255),
        IN cam_51 varchar(255),
        IN cam_52 varchar(255),
        IN cam_53 varchar(255),
        IN cam_54 varchar(255),
        IN cam_55 varchar(255),
        IN cam_56 varchar(255),
        IN cam_57 varchar(255),
        IN cam_58 varchar(255),
        IN cam_59 varchar(255),
        IN cam_60 varchar(255)
        
        
    )
BEGIN
INSERT INTO
    TBL_BITACORA(COD_BITACORA, TBL_NOMBRE, FEC_EDICION, FEC_CREACION, USR_REGISTRO, USR_MODIFICACION, ACCION_REALIZADA, CAMPO_1, CAMPO_2, CAMPO_3, CAMPO_4, CAMPO_5, CAMPO_6, CAMPO_7, CAMPO_8, CAMPO_9, CAMPO_10, CAMPO_11, CAMPO_12, CAMPO_13, CAMPO_14, CAMPO_15, CAMPO_16, CAMPO_17, CAMPO_18, CAMPO_19, CAMPO_20, CAMPO_21, CAMPO_22, CAMPO_23, CAMPO_24, CAMPO_25, CAMPO_26, CAMPO_27, CAMPO_28, CAMPO_29, CAMPO_30, CAMPO_31, CAMPO_32, CAMPO_33, CAMPO_34, CAMPO_35, CAMPO_36, CAMPO_37, CAMPO_38, CAMPO_39, CAMPO_40, CAMPO_41, CAMPO_42, CAMPO_43, CAMPO_44, CAMPO_45, CAMPO_46, CAMPO_47, CAMPO_48, CAMPO_49, CAMPO_50, CAMPO_51, CAMPO_52, CAMPO_53, CAMPO_54, CAMPO_55, CAMPO_56, CAMPO_57, CAMPO_58, CAMPO_59, CAMPO_60) 
    VALUE ( cod_bita, tbl_nom, fec_edici, fec_creaci, usr_registro, usr_modificacion, accion_reali, cam_1, cam_2, cam_3, cam_4, cam_5, cam_6, cam_7, cam_8, cam_9, cam_10, cam_11, cam_12, cam_13, cam_14, cam_15, cam_16, cam_17, cam_18, cam_19, cam_20, cam_21, cam_22, cam_23, cam_24, cam_25, cam_26, cam_27, cam_28, cam_29, cam_30, cam_31, cam_32, cam_33, cam_34, cam_35, cam_36, cam_37, cam_38, cam_39, cam_40, cam_41, cam_42, cam_43, cam_44, cam_45, cam_46, cam_47, cam_48, cam_49, cam_50, cam_51, cam_52, cam_53, cam_54, cam_55, cam_56, cam_57, cam_58, cam_59, cam_60) ;
END$$


---UPDATE BITACORA----

/* PROCEDIMINETO DE INSERT*/
DROP procedure IF EXISTS `UPDATE_BITACORA`;

DELIMITER $$
USE `TIENDASM`$$
CREATE PROCEDURE `UPDATE_BITACORA`(
	    IN cod_bita INT,       
		IN tbl_nom VARCHAR(50),
        IN fec_edici DATETIME,
        IN fec_creaci DATETIME,
        IN usr_registro VARCHAR(20),
        IN usr_modificacion VARCHAR(20),
        IN accion_reali VARCHAR(50),
        IN cam_1 varchar(255),
        IN cam_2 varchar(255),
        IN cam_3 varchar(255),
        IN cam_4 varchar(255),
        IN cam_5 varchar(255),
        IN cam_6 varchar(255),
        IN cam_7 varchar(255),
        IN cam_8 varchar(255),
        IN cam_9 varchar(255),
        IN cam_10 varchar(255),
        IN cam_11 varchar(255),
        IN cam_12 varchar(255),
        IN cam_13 varchar(255),
        IN cam_14 varchar(255),
        IN cam_15 varchar(255),
        IN cam_16 varchar(255),
        IN cam_17 varchar(255),
        IN cam_18 varchar(255),
        IN cam_19 varchar(255),
        IN cam_20 varchar(255),
        IN cam_21 varchar(255),
        IN cam_22 varchar(255),
        IN cam_23 varchar(255),
        IN cam_24 varchar(255),
        IN cam_25 varchar(255),
        IN cam_26 varchar(255),
        IN cam_27 varchar(255),
        IN cam_28 varchar(255),
        IN cam_29 varchar(255),
        IN cam_30 varchar(255),
        IN cam_31 varchar(255),
        IN cam_32 varchar(255),
        IN cam_33 varchar(255),
        IN cam_34 varchar(255),
        IN cam_35 varchar(255),
        IN cam_36 varchar(255),
        IN cam_37 varchar(255),
        IN cam_38 varchar(255),
        IN cam_39 varchar(255),
        IN cam_40 varchar(255),
        IN cam_41 varchar(255),
        IN cam_42 varchar(255),
        IN cam_43 varchar(255),
        IN cam_44 varchar(255),
        IN cam_45 varchar(255),
        IN cam_46 varchar(255),
        IN cam_47 varchar(255),
        IN cam_48 varchar(255),
        IN cam_49 varchar(255),
        IN cam_50 varchar(255),
        IN cam_51 varchar(255),
        IN cam_52 varchar(255),
        IN cam_53 varchar(255),
        IN cam_54 varchar(255),
        IN cam_55 varchar(255),
        IN cam_56 varchar(255),
        IN cam_57 varchar(255),
        IN cam_58 varchar(255),
        IN cam_59 varchar(255),
        IN cam_60 varchar(255)
        
        
    )
BEGIN
UPDATE TBL_BITACORA 
SET 
 TBL_NOMBRE = tbl_nom,
 FEC_EDICION = fec_edici,
 FEC_CREACION = fec_creaci,
 USR_REGISTRO =usr_registro,
 USR_MODIFICACION = usr_modificacion,
 ACCION_REALIZADA = accion_reali,
 CAMPO_1 = cam_1, 
 CAMPO_2 = cam_2, 
 CAMPO_3 = cam_3, 
 CAMPO_4 = cam_4,
 CAMPO_5 = cam_5,
 CAMPO_6 = cam_6,
 CAMPO_7 = cam_7, 
 CAMPO_8 = cam_8, 
 CAMPO_9 = cam_9, 
 CAMPO_10= cam_10, 
 CAMPO_11 = cam_11, 
 CAMPO_12 = cam_12, 
 CAMPO_13 = cam_13, 
 CAMPO_14 = cam_14, 
 CAMPO_15 = cam_15, 
 CAMPO_16 = cam_16, 
 CAMPO_17 = cam_17, 
 CAMPO_18 = cam_18, 
 CAMPO_19 = cam_19, 
 CAMPO_20 = cam_20, 
 CAMPO_21 = cam_21, 
 CAMPO_22 = cam_22, 
 CAMPO_23 = cam_23, 
 CAMPO_24 = cam_24, 
 CAMPO_25 = cam_25, 
 CAMPO_26 = cam_26, 
 CAMPO_27 = cam_27, 
 CAMPO_28 = cam_28, 
 CAMPO_29 = cam_29, 
 CAMPO_30 = cam_30, 
 CAMPO_31 = cam_31, 
 CAMPO_32 = cam_32, 
 CAMPO_33 = cam_33, 
 CAMPO_34 = cam_34, 
 CAMPO_35 = cam_35, 
 CAMPO_36 = cam_36, 
 CAMPO_37 = cam_37, 
 CAMPO_38 = cam_38,
 CAMPO_39 = cam_39, 
 CAMPO_40 = cam_40,
 CAMPO_41 = cam_41, 
 CAMPO_42 = cam_42, 
 CAMPO_43 = cam_43, 
 CAMPO_44 = cam_44, 
 CAMPO_45 = cam_45,
 CAMPO_46 = cam_46, 
 CAMPO_47 = cam_47, 
 CAMPO_48 = cam_48, 
 CAMPO_49 = cam_49, 
 CAMPO_50 = cam_50, 
 CAMPO_51 = cam_51, 
 CAMPO_52 = cam_52, 
 CAMPO_53 = cam_53, 
 CAMPO_54 = cam_54, 
 CAMPO_55 = cam_55, 
 CAMPO_56 = cam_56, 
 CAMPO_57 = cam_57, 
 CAMPO_58 = cam_58, 
 CAMPO_59 = cam_59, 
 CAMPO_60 = cam_60
 
 
 WHERE  COD_BITACORA = cod_bita;
 COMMIT;
END$$

-- DELETE BITACORA--

/* PROCEDIMIENTO DE DELETE*/

DROP procedure IF EXISTS `DELETE_BITACORA`;

DELIMITER $$
USE `TIENDASM`$$
CREATE PROCEDURE `DELETE_BITACORA` (IN COD INT)
BEGIN

DELETE from TBL_BITACORAS where COD_BITACORA= COD;

END$$
   


